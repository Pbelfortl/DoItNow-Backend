
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model divisao
 * 
 */
export type divisao = {
  id: number
  name: string
  descricao: string
  days: number
}

/**
 * Model exercicio
 * 
 */
export type exercicio = {
  id: number
  name: string
  musculaturaId: number
  video: string
}

/**
 * Model grupo
 * 
 */
export type grupo = {
  id: number
  treinoId: number
  day: days | null
  exercicio1: number
  exercicio2: number
  exercicio3: number
  exercicio4: number
  exercicio5: number | null
  exercicio6: number | null
  exercicio7: number | null
}

/**
 * Model musculatura
 * 
 */
export type musculatura = {
  id: number
  name: string
  image: string
}

/**
 * Model treino
 * 
 */
export type treino = {
  id: number
  userId: number
  divisaoId: number
}

/**
 * Model user
 * 
 */
export type user = {
  id: number
  nome: string
  email: string
  password: string
  idade: number
  altura: number
  peso: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const days: {
  A: 'A',
  B: 'B',
  C: 'C',
  D: 'D',
  E: 'E'
};

export type days = (typeof days)[keyof typeof days]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Divisaos
 * const divisaos = await prisma.divisao.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Divisaos
   * const divisaos = await prisma.divisao.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.divisao`: Exposes CRUD operations for the **divisao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Divisaos
    * const divisaos = await prisma.divisao.findMany()
    * ```
    */
  get divisao(): Prisma.divisaoDelegate<GlobalReject>;

  /**
   * `prisma.exercicio`: Exposes CRUD operations for the **exercicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercicios
    * const exercicios = await prisma.exercicio.findMany()
    * ```
    */
  get exercicio(): Prisma.exercicioDelegate<GlobalReject>;

  /**
   * `prisma.grupo`: Exposes CRUD operations for the **grupo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grupos
    * const grupos = await prisma.grupo.findMany()
    * ```
    */
  get grupo(): Prisma.grupoDelegate<GlobalReject>;

  /**
   * `prisma.musculatura`: Exposes CRUD operations for the **musculatura** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Musculaturas
    * const musculaturas = await prisma.musculatura.findMany()
    * ```
    */
  get musculatura(): Prisma.musculaturaDelegate<GlobalReject>;

  /**
   * `prisma.treino`: Exposes CRUD operations for the **treino** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Treinos
    * const treinos = await prisma.treino.findMany()
    * ```
    */
  get treino(): Prisma.treinoDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    divisao: 'divisao',
    exercicio: 'exercicio',
    grupo: 'grupo',
    musculatura: 'musculatura',
    treino: 'treino',
    user: 'user'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DivisaoCountOutputType
   */


  export type DivisaoCountOutputType = {
    treino: number
  }

  export type DivisaoCountOutputTypeSelect = {
    treino?: boolean
  }

  export type DivisaoCountOutputTypeGetPayload<S extends boolean | null | undefined | DivisaoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DivisaoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DivisaoCountOutputTypeArgs)
    ? DivisaoCountOutputType 
    : S extends { select: any } & (DivisaoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DivisaoCountOutputType ? DivisaoCountOutputType[P] : never
  } 
      : DivisaoCountOutputType




  // Custom InputTypes

  /**
   * DivisaoCountOutputType without action
   */
  export type DivisaoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DivisaoCountOutputType
     */
    select?: DivisaoCountOutputTypeSelect | null
  }



  /**
   * Count Type ExercicioCountOutputType
   */


  export type ExercicioCountOutputType = {
    grupo_grupo_exercicio1Toexercicio: number
    grupo_grupo_exercicio2Toexercicio: number
    grupo_grupo_exercicio3Toexercicio: number
    grupo_grupo_exercicio4Toexercicio: number
    grupo_grupo_exercicio5Toexercicio: number
    grupo_grupo_exercicio6Toexercicio: number
    grupo_grupo_exercicio7Toexercicio: number
  }

  export type ExercicioCountOutputTypeSelect = {
    grupo_grupo_exercicio1Toexercicio?: boolean
    grupo_grupo_exercicio2Toexercicio?: boolean
    grupo_grupo_exercicio3Toexercicio?: boolean
    grupo_grupo_exercicio4Toexercicio?: boolean
    grupo_grupo_exercicio5Toexercicio?: boolean
    grupo_grupo_exercicio6Toexercicio?: boolean
    grupo_grupo_exercicio7Toexercicio?: boolean
  }

  export type ExercicioCountOutputTypeGetPayload<S extends boolean | null | undefined | ExercicioCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ExercicioCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ExercicioCountOutputTypeArgs)
    ? ExercicioCountOutputType 
    : S extends { select: any } & (ExercicioCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ExercicioCountOutputType ? ExercicioCountOutputType[P] : never
  } 
      : ExercicioCountOutputType




  // Custom InputTypes

  /**
   * ExercicioCountOutputType without action
   */
  export type ExercicioCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ExercicioCountOutputType
     */
    select?: ExercicioCountOutputTypeSelect | null
  }



  /**
   * Count Type MusculaturaCountOutputType
   */


  export type MusculaturaCountOutputType = {
    exercicio: number
  }

  export type MusculaturaCountOutputTypeSelect = {
    exercicio?: boolean
  }

  export type MusculaturaCountOutputTypeGetPayload<S extends boolean | null | undefined | MusculaturaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MusculaturaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (MusculaturaCountOutputTypeArgs)
    ? MusculaturaCountOutputType 
    : S extends { select: any } & (MusculaturaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof MusculaturaCountOutputType ? MusculaturaCountOutputType[P] : never
  } 
      : MusculaturaCountOutputType




  // Custom InputTypes

  /**
   * MusculaturaCountOutputType without action
   */
  export type MusculaturaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MusculaturaCountOutputType
     */
    select?: MusculaturaCountOutputTypeSelect | null
  }



  /**
   * Count Type TreinoCountOutputType
   */


  export type TreinoCountOutputType = {
    grupo: number
  }

  export type TreinoCountOutputTypeSelect = {
    grupo?: boolean
  }

  export type TreinoCountOutputTypeGetPayload<S extends boolean | null | undefined | TreinoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TreinoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TreinoCountOutputTypeArgs)
    ? TreinoCountOutputType 
    : S extends { select: any } & (TreinoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TreinoCountOutputType ? TreinoCountOutputType[P] : never
  } 
      : TreinoCountOutputType




  // Custom InputTypes

  /**
   * TreinoCountOutputType without action
   */
  export type TreinoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TreinoCountOutputType
     */
    select?: TreinoCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    treino: number
  }

  export type UserCountOutputTypeSelect = {
    treino?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model divisao
   */


  export type AggregateDivisao = {
    _count: DivisaoCountAggregateOutputType | null
    _avg: DivisaoAvgAggregateOutputType | null
    _sum: DivisaoSumAggregateOutputType | null
    _min: DivisaoMinAggregateOutputType | null
    _max: DivisaoMaxAggregateOutputType | null
  }

  export type DivisaoAvgAggregateOutputType = {
    id: number | null
    days: number | null
  }

  export type DivisaoSumAggregateOutputType = {
    id: number | null
    days: number | null
  }

  export type DivisaoMinAggregateOutputType = {
    id: number | null
    name: string | null
    descricao: string | null
    days: number | null
  }

  export type DivisaoMaxAggregateOutputType = {
    id: number | null
    name: string | null
    descricao: string | null
    days: number | null
  }

  export type DivisaoCountAggregateOutputType = {
    id: number
    name: number
    descricao: number
    days: number
    _all: number
  }


  export type DivisaoAvgAggregateInputType = {
    id?: true
    days?: true
  }

  export type DivisaoSumAggregateInputType = {
    id?: true
    days?: true
  }

  export type DivisaoMinAggregateInputType = {
    id?: true
    name?: true
    descricao?: true
    days?: true
  }

  export type DivisaoMaxAggregateInputType = {
    id?: true
    name?: true
    descricao?: true
    days?: true
  }

  export type DivisaoCountAggregateInputType = {
    id?: true
    name?: true
    descricao?: true
    days?: true
    _all?: true
  }

  export type DivisaoAggregateArgs = {
    /**
     * Filter which divisao to aggregate.
     */
    where?: divisaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of divisaos to fetch.
     */
    orderBy?: Enumerable<divisaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: divisaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` divisaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` divisaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned divisaos
    **/
    _count?: true | DivisaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DivisaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DivisaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DivisaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DivisaoMaxAggregateInputType
  }

  export type GetDivisaoAggregateType<T extends DivisaoAggregateArgs> = {
        [P in keyof T & keyof AggregateDivisao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDivisao[P]>
      : GetScalarType<T[P], AggregateDivisao[P]>
  }




  export type DivisaoGroupByArgs = {
    where?: divisaoWhereInput
    orderBy?: Enumerable<divisaoOrderByWithAggregationInput>
    by: DivisaoScalarFieldEnum[]
    having?: divisaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DivisaoCountAggregateInputType | true
    _avg?: DivisaoAvgAggregateInputType
    _sum?: DivisaoSumAggregateInputType
    _min?: DivisaoMinAggregateInputType
    _max?: DivisaoMaxAggregateInputType
  }


  export type DivisaoGroupByOutputType = {
    id: number
    name: string
    descricao: string
    days: number
    _count: DivisaoCountAggregateOutputType | null
    _avg: DivisaoAvgAggregateOutputType | null
    _sum: DivisaoSumAggregateOutputType | null
    _min: DivisaoMinAggregateOutputType | null
    _max: DivisaoMaxAggregateOutputType | null
  }

  type GetDivisaoGroupByPayload<T extends DivisaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DivisaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DivisaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DivisaoGroupByOutputType[P]>
            : GetScalarType<T[P], DivisaoGroupByOutputType[P]>
        }
      >
    >


  export type divisaoSelect = {
    id?: boolean
    name?: boolean
    descricao?: boolean
    days?: boolean
    treino?: boolean | divisao$treinoArgs
    _count?: boolean | DivisaoCountOutputTypeArgs
  }


  export type divisaoInclude = {
    treino?: boolean | divisao$treinoArgs
    _count?: boolean | DivisaoCountOutputTypeArgs
  }

  export type divisaoGetPayload<S extends boolean | null | undefined | divisaoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? divisao :
    S extends undefined ? never :
    S extends { include: any } & (divisaoArgs | divisaoFindManyArgs)
    ? divisao  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'treino' ? Array < treinoGetPayload<S['include'][P]>>  :
        P extends '_count' ? DivisaoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (divisaoArgs | divisaoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'treino' ? Array < treinoGetPayload<S['select'][P]>>  :
        P extends '_count' ? DivisaoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof divisao ? divisao[P] : never
  } 
      : divisao


  type divisaoCountArgs = 
    Omit<divisaoFindManyArgs, 'select' | 'include'> & {
      select?: DivisaoCountAggregateInputType | true
    }

  export interface divisaoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Divisao that matches the filter.
     * @param {divisaoFindUniqueArgs} args - Arguments to find a Divisao
     * @example
     * // Get one Divisao
     * const divisao = await prisma.divisao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends divisaoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, divisaoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'divisao'> extends True ? Prisma__divisaoClient<divisaoGetPayload<T>> : Prisma__divisaoClient<divisaoGetPayload<T> | null, null>

    /**
     * Find one Divisao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {divisaoFindUniqueOrThrowArgs} args - Arguments to find a Divisao
     * @example
     * // Get one Divisao
     * const divisao = await prisma.divisao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends divisaoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, divisaoFindUniqueOrThrowArgs>
    ): Prisma__divisaoClient<divisaoGetPayload<T>>

    /**
     * Find the first Divisao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {divisaoFindFirstArgs} args - Arguments to find a Divisao
     * @example
     * // Get one Divisao
     * const divisao = await prisma.divisao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends divisaoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, divisaoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'divisao'> extends True ? Prisma__divisaoClient<divisaoGetPayload<T>> : Prisma__divisaoClient<divisaoGetPayload<T> | null, null>

    /**
     * Find the first Divisao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {divisaoFindFirstOrThrowArgs} args - Arguments to find a Divisao
     * @example
     * // Get one Divisao
     * const divisao = await prisma.divisao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends divisaoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, divisaoFindFirstOrThrowArgs>
    ): Prisma__divisaoClient<divisaoGetPayload<T>>

    /**
     * Find zero or more Divisaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {divisaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Divisaos
     * const divisaos = await prisma.divisao.findMany()
     * 
     * // Get first 10 Divisaos
     * const divisaos = await prisma.divisao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const divisaoWithIdOnly = await prisma.divisao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends divisaoFindManyArgs>(
      args?: SelectSubset<T, divisaoFindManyArgs>
    ): Prisma.PrismaPromise<Array<divisaoGetPayload<T>>>

    /**
     * Create a Divisao.
     * @param {divisaoCreateArgs} args - Arguments to create a Divisao.
     * @example
     * // Create one Divisao
     * const Divisao = await prisma.divisao.create({
     *   data: {
     *     // ... data to create a Divisao
     *   }
     * })
     * 
    **/
    create<T extends divisaoCreateArgs>(
      args: SelectSubset<T, divisaoCreateArgs>
    ): Prisma__divisaoClient<divisaoGetPayload<T>>

    /**
     * Create many Divisaos.
     *     @param {divisaoCreateManyArgs} args - Arguments to create many Divisaos.
     *     @example
     *     // Create many Divisaos
     *     const divisao = await prisma.divisao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends divisaoCreateManyArgs>(
      args?: SelectSubset<T, divisaoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Divisao.
     * @param {divisaoDeleteArgs} args - Arguments to delete one Divisao.
     * @example
     * // Delete one Divisao
     * const Divisao = await prisma.divisao.delete({
     *   where: {
     *     // ... filter to delete one Divisao
     *   }
     * })
     * 
    **/
    delete<T extends divisaoDeleteArgs>(
      args: SelectSubset<T, divisaoDeleteArgs>
    ): Prisma__divisaoClient<divisaoGetPayload<T>>

    /**
     * Update one Divisao.
     * @param {divisaoUpdateArgs} args - Arguments to update one Divisao.
     * @example
     * // Update one Divisao
     * const divisao = await prisma.divisao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends divisaoUpdateArgs>(
      args: SelectSubset<T, divisaoUpdateArgs>
    ): Prisma__divisaoClient<divisaoGetPayload<T>>

    /**
     * Delete zero or more Divisaos.
     * @param {divisaoDeleteManyArgs} args - Arguments to filter Divisaos to delete.
     * @example
     * // Delete a few Divisaos
     * const { count } = await prisma.divisao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends divisaoDeleteManyArgs>(
      args?: SelectSubset<T, divisaoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Divisaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {divisaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Divisaos
     * const divisao = await prisma.divisao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends divisaoUpdateManyArgs>(
      args: SelectSubset<T, divisaoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Divisao.
     * @param {divisaoUpsertArgs} args - Arguments to update or create a Divisao.
     * @example
     * // Update or create a Divisao
     * const divisao = await prisma.divisao.upsert({
     *   create: {
     *     // ... data to create a Divisao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Divisao we want to update
     *   }
     * })
    **/
    upsert<T extends divisaoUpsertArgs>(
      args: SelectSubset<T, divisaoUpsertArgs>
    ): Prisma__divisaoClient<divisaoGetPayload<T>>

    /**
     * Count the number of Divisaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {divisaoCountArgs} args - Arguments to filter Divisaos to count.
     * @example
     * // Count the number of Divisaos
     * const count = await prisma.divisao.count({
     *   where: {
     *     // ... the filter for the Divisaos we want to count
     *   }
     * })
    **/
    count<T extends divisaoCountArgs>(
      args?: Subset<T, divisaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DivisaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Divisao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DivisaoAggregateArgs>(args: Subset<T, DivisaoAggregateArgs>): Prisma.PrismaPromise<GetDivisaoAggregateType<T>>

    /**
     * Group by Divisao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DivisaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DivisaoGroupByArgs['orderBy'] }
        : { orderBy?: DivisaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DivisaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDivisaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for divisao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__divisaoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    treino<T extends divisao$treinoArgs= {}>(args?: Subset<T, divisao$treinoArgs>): Prisma.PrismaPromise<Array<treinoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * divisao base type for findUnique actions
   */
  export type divisaoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the divisao
     */
    select?: divisaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: divisaoInclude | null
    /**
     * Filter, which divisao to fetch.
     */
    where: divisaoWhereUniqueInput
  }

  /**
   * divisao findUnique
   */
  export interface divisaoFindUniqueArgs extends divisaoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * divisao findUniqueOrThrow
   */
  export type divisaoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the divisao
     */
    select?: divisaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: divisaoInclude | null
    /**
     * Filter, which divisao to fetch.
     */
    where: divisaoWhereUniqueInput
  }


  /**
   * divisao base type for findFirst actions
   */
  export type divisaoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the divisao
     */
    select?: divisaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: divisaoInclude | null
    /**
     * Filter, which divisao to fetch.
     */
    where?: divisaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of divisaos to fetch.
     */
    orderBy?: Enumerable<divisaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for divisaos.
     */
    cursor?: divisaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` divisaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` divisaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of divisaos.
     */
    distinct?: Enumerable<DivisaoScalarFieldEnum>
  }

  /**
   * divisao findFirst
   */
  export interface divisaoFindFirstArgs extends divisaoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * divisao findFirstOrThrow
   */
  export type divisaoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the divisao
     */
    select?: divisaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: divisaoInclude | null
    /**
     * Filter, which divisao to fetch.
     */
    where?: divisaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of divisaos to fetch.
     */
    orderBy?: Enumerable<divisaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for divisaos.
     */
    cursor?: divisaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` divisaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` divisaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of divisaos.
     */
    distinct?: Enumerable<DivisaoScalarFieldEnum>
  }


  /**
   * divisao findMany
   */
  export type divisaoFindManyArgs = {
    /**
     * Select specific fields to fetch from the divisao
     */
    select?: divisaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: divisaoInclude | null
    /**
     * Filter, which divisaos to fetch.
     */
    where?: divisaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of divisaos to fetch.
     */
    orderBy?: Enumerable<divisaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing divisaos.
     */
    cursor?: divisaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` divisaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` divisaos.
     */
    skip?: number
    distinct?: Enumerable<DivisaoScalarFieldEnum>
  }


  /**
   * divisao create
   */
  export type divisaoCreateArgs = {
    /**
     * Select specific fields to fetch from the divisao
     */
    select?: divisaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: divisaoInclude | null
    /**
     * The data needed to create a divisao.
     */
    data: XOR<divisaoCreateInput, divisaoUncheckedCreateInput>
  }


  /**
   * divisao createMany
   */
  export type divisaoCreateManyArgs = {
    /**
     * The data used to create many divisaos.
     */
    data: Enumerable<divisaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * divisao update
   */
  export type divisaoUpdateArgs = {
    /**
     * Select specific fields to fetch from the divisao
     */
    select?: divisaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: divisaoInclude | null
    /**
     * The data needed to update a divisao.
     */
    data: XOR<divisaoUpdateInput, divisaoUncheckedUpdateInput>
    /**
     * Choose, which divisao to update.
     */
    where: divisaoWhereUniqueInput
  }


  /**
   * divisao updateMany
   */
  export type divisaoUpdateManyArgs = {
    /**
     * The data used to update divisaos.
     */
    data: XOR<divisaoUpdateManyMutationInput, divisaoUncheckedUpdateManyInput>
    /**
     * Filter which divisaos to update
     */
    where?: divisaoWhereInput
  }


  /**
   * divisao upsert
   */
  export type divisaoUpsertArgs = {
    /**
     * Select specific fields to fetch from the divisao
     */
    select?: divisaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: divisaoInclude | null
    /**
     * The filter to search for the divisao to update in case it exists.
     */
    where: divisaoWhereUniqueInput
    /**
     * In case the divisao found by the `where` argument doesn't exist, create a new divisao with this data.
     */
    create: XOR<divisaoCreateInput, divisaoUncheckedCreateInput>
    /**
     * In case the divisao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<divisaoUpdateInput, divisaoUncheckedUpdateInput>
  }


  /**
   * divisao delete
   */
  export type divisaoDeleteArgs = {
    /**
     * Select specific fields to fetch from the divisao
     */
    select?: divisaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: divisaoInclude | null
    /**
     * Filter which divisao to delete.
     */
    where: divisaoWhereUniqueInput
  }


  /**
   * divisao deleteMany
   */
  export type divisaoDeleteManyArgs = {
    /**
     * Filter which divisaos to delete
     */
    where?: divisaoWhereInput
  }


  /**
   * divisao.treino
   */
  export type divisao$treinoArgs = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
    where?: treinoWhereInput
    orderBy?: Enumerable<treinoOrderByWithRelationInput>
    cursor?: treinoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TreinoScalarFieldEnum>
  }


  /**
   * divisao without action
   */
  export type divisaoArgs = {
    /**
     * Select specific fields to fetch from the divisao
     */
    select?: divisaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: divisaoInclude | null
  }



  /**
   * Model exercicio
   */


  export type AggregateExercicio = {
    _count: ExercicioCountAggregateOutputType | null
    _avg: ExercicioAvgAggregateOutputType | null
    _sum: ExercicioSumAggregateOutputType | null
    _min: ExercicioMinAggregateOutputType | null
    _max: ExercicioMaxAggregateOutputType | null
  }

  export type ExercicioAvgAggregateOutputType = {
    id: number | null
    musculaturaId: number | null
  }

  export type ExercicioSumAggregateOutputType = {
    id: number | null
    musculaturaId: number | null
  }

  export type ExercicioMinAggregateOutputType = {
    id: number | null
    name: string | null
    musculaturaId: number | null
    video: string | null
  }

  export type ExercicioMaxAggregateOutputType = {
    id: number | null
    name: string | null
    musculaturaId: number | null
    video: string | null
  }

  export type ExercicioCountAggregateOutputType = {
    id: number
    name: number
    musculaturaId: number
    video: number
    _all: number
  }


  export type ExercicioAvgAggregateInputType = {
    id?: true
    musculaturaId?: true
  }

  export type ExercicioSumAggregateInputType = {
    id?: true
    musculaturaId?: true
  }

  export type ExercicioMinAggregateInputType = {
    id?: true
    name?: true
    musculaturaId?: true
    video?: true
  }

  export type ExercicioMaxAggregateInputType = {
    id?: true
    name?: true
    musculaturaId?: true
    video?: true
  }

  export type ExercicioCountAggregateInputType = {
    id?: true
    name?: true
    musculaturaId?: true
    video?: true
    _all?: true
  }

  export type ExercicioAggregateArgs = {
    /**
     * Filter which exercicio to aggregate.
     */
    where?: exercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercicios to fetch.
     */
    orderBy?: Enumerable<exercicioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: exercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned exercicios
    **/
    _count?: true | ExercicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExercicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExercicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExercicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExercicioMaxAggregateInputType
  }

  export type GetExercicioAggregateType<T extends ExercicioAggregateArgs> = {
        [P in keyof T & keyof AggregateExercicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercicio[P]>
      : GetScalarType<T[P], AggregateExercicio[P]>
  }




  export type ExercicioGroupByArgs = {
    where?: exercicioWhereInput
    orderBy?: Enumerable<exercicioOrderByWithAggregationInput>
    by: ExercicioScalarFieldEnum[]
    having?: exercicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExercicioCountAggregateInputType | true
    _avg?: ExercicioAvgAggregateInputType
    _sum?: ExercicioSumAggregateInputType
    _min?: ExercicioMinAggregateInputType
    _max?: ExercicioMaxAggregateInputType
  }


  export type ExercicioGroupByOutputType = {
    id: number
    name: string
    musculaturaId: number
    video: string
    _count: ExercicioCountAggregateOutputType | null
    _avg: ExercicioAvgAggregateOutputType | null
    _sum: ExercicioSumAggregateOutputType | null
    _min: ExercicioMinAggregateOutputType | null
    _max: ExercicioMaxAggregateOutputType | null
  }

  type GetExercicioGroupByPayload<T extends ExercicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ExercicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExercicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExercicioGroupByOutputType[P]>
            : GetScalarType<T[P], ExercicioGroupByOutputType[P]>
        }
      >
    >


  export type exercicioSelect = {
    id?: boolean
    name?: boolean
    musculaturaId?: boolean
    video?: boolean
    musculatura?: boolean | musculaturaArgs
    grupo_grupo_exercicio1Toexercicio?: boolean | exercicio$grupo_grupo_exercicio1ToexercicioArgs
    grupo_grupo_exercicio2Toexercicio?: boolean | exercicio$grupo_grupo_exercicio2ToexercicioArgs
    grupo_grupo_exercicio3Toexercicio?: boolean | exercicio$grupo_grupo_exercicio3ToexercicioArgs
    grupo_grupo_exercicio4Toexercicio?: boolean | exercicio$grupo_grupo_exercicio4ToexercicioArgs
    grupo_grupo_exercicio5Toexercicio?: boolean | exercicio$grupo_grupo_exercicio5ToexercicioArgs
    grupo_grupo_exercicio6Toexercicio?: boolean | exercicio$grupo_grupo_exercicio6ToexercicioArgs
    grupo_grupo_exercicio7Toexercicio?: boolean | exercicio$grupo_grupo_exercicio7ToexercicioArgs
    _count?: boolean | ExercicioCountOutputTypeArgs
  }


  export type exercicioInclude = {
    musculatura?: boolean | musculaturaArgs
    grupo_grupo_exercicio1Toexercicio?: boolean | exercicio$grupo_grupo_exercicio1ToexercicioArgs
    grupo_grupo_exercicio2Toexercicio?: boolean | exercicio$grupo_grupo_exercicio2ToexercicioArgs
    grupo_grupo_exercicio3Toexercicio?: boolean | exercicio$grupo_grupo_exercicio3ToexercicioArgs
    grupo_grupo_exercicio4Toexercicio?: boolean | exercicio$grupo_grupo_exercicio4ToexercicioArgs
    grupo_grupo_exercicio5Toexercicio?: boolean | exercicio$grupo_grupo_exercicio5ToexercicioArgs
    grupo_grupo_exercicio6Toexercicio?: boolean | exercicio$grupo_grupo_exercicio6ToexercicioArgs
    grupo_grupo_exercicio7Toexercicio?: boolean | exercicio$grupo_grupo_exercicio7ToexercicioArgs
    _count?: boolean | ExercicioCountOutputTypeArgs
  }

  export type exercicioGetPayload<S extends boolean | null | undefined | exercicioArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? exercicio :
    S extends undefined ? never :
    S extends { include: any } & (exercicioArgs | exercicioFindManyArgs)
    ? exercicio  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'musculatura' ? musculaturaGetPayload<S['include'][P]> :
        P extends 'grupo_grupo_exercicio1Toexercicio' ? Array < grupoGetPayload<S['include'][P]>>  :
        P extends 'grupo_grupo_exercicio2Toexercicio' ? Array < grupoGetPayload<S['include'][P]>>  :
        P extends 'grupo_grupo_exercicio3Toexercicio' ? Array < grupoGetPayload<S['include'][P]>>  :
        P extends 'grupo_grupo_exercicio4Toexercicio' ? Array < grupoGetPayload<S['include'][P]>>  :
        P extends 'grupo_grupo_exercicio5Toexercicio' ? Array < grupoGetPayload<S['include'][P]>>  :
        P extends 'grupo_grupo_exercicio6Toexercicio' ? Array < grupoGetPayload<S['include'][P]>>  :
        P extends 'grupo_grupo_exercicio7Toexercicio' ? Array < grupoGetPayload<S['include'][P]>>  :
        P extends '_count' ? ExercicioCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (exercicioArgs | exercicioFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'musculatura' ? musculaturaGetPayload<S['select'][P]> :
        P extends 'grupo_grupo_exercicio1Toexercicio' ? Array < grupoGetPayload<S['select'][P]>>  :
        P extends 'grupo_grupo_exercicio2Toexercicio' ? Array < grupoGetPayload<S['select'][P]>>  :
        P extends 'grupo_grupo_exercicio3Toexercicio' ? Array < grupoGetPayload<S['select'][P]>>  :
        P extends 'grupo_grupo_exercicio4Toexercicio' ? Array < grupoGetPayload<S['select'][P]>>  :
        P extends 'grupo_grupo_exercicio5Toexercicio' ? Array < grupoGetPayload<S['select'][P]>>  :
        P extends 'grupo_grupo_exercicio6Toexercicio' ? Array < grupoGetPayload<S['select'][P]>>  :
        P extends 'grupo_grupo_exercicio7Toexercicio' ? Array < grupoGetPayload<S['select'][P]>>  :
        P extends '_count' ? ExercicioCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof exercicio ? exercicio[P] : never
  } 
      : exercicio


  type exercicioCountArgs = 
    Omit<exercicioFindManyArgs, 'select' | 'include'> & {
      select?: ExercicioCountAggregateInputType | true
    }

  export interface exercicioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Exercicio that matches the filter.
     * @param {exercicioFindUniqueArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends exercicioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, exercicioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'exercicio'> extends True ? Prisma__exercicioClient<exercicioGetPayload<T>> : Prisma__exercicioClient<exercicioGetPayload<T> | null, null>

    /**
     * Find one Exercicio that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {exercicioFindUniqueOrThrowArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends exercicioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, exercicioFindUniqueOrThrowArgs>
    ): Prisma__exercicioClient<exercicioGetPayload<T>>

    /**
     * Find the first Exercicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercicioFindFirstArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends exercicioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, exercicioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'exercicio'> extends True ? Prisma__exercicioClient<exercicioGetPayload<T>> : Prisma__exercicioClient<exercicioGetPayload<T> | null, null>

    /**
     * Find the first Exercicio that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercicioFindFirstOrThrowArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends exercicioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, exercicioFindFirstOrThrowArgs>
    ): Prisma__exercicioClient<exercicioGetPayload<T>>

    /**
     * Find zero or more Exercicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercicioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercicios
     * const exercicios = await prisma.exercicio.findMany()
     * 
     * // Get first 10 Exercicios
     * const exercicios = await prisma.exercicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exercicioWithIdOnly = await prisma.exercicio.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends exercicioFindManyArgs>(
      args?: SelectSubset<T, exercicioFindManyArgs>
    ): Prisma.PrismaPromise<Array<exercicioGetPayload<T>>>

    /**
     * Create a Exercicio.
     * @param {exercicioCreateArgs} args - Arguments to create a Exercicio.
     * @example
     * // Create one Exercicio
     * const Exercicio = await prisma.exercicio.create({
     *   data: {
     *     // ... data to create a Exercicio
     *   }
     * })
     * 
    **/
    create<T extends exercicioCreateArgs>(
      args: SelectSubset<T, exercicioCreateArgs>
    ): Prisma__exercicioClient<exercicioGetPayload<T>>

    /**
     * Create many Exercicios.
     *     @param {exercicioCreateManyArgs} args - Arguments to create many Exercicios.
     *     @example
     *     // Create many Exercicios
     *     const exercicio = await prisma.exercicio.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends exercicioCreateManyArgs>(
      args?: SelectSubset<T, exercicioCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exercicio.
     * @param {exercicioDeleteArgs} args - Arguments to delete one Exercicio.
     * @example
     * // Delete one Exercicio
     * const Exercicio = await prisma.exercicio.delete({
     *   where: {
     *     // ... filter to delete one Exercicio
     *   }
     * })
     * 
    **/
    delete<T extends exercicioDeleteArgs>(
      args: SelectSubset<T, exercicioDeleteArgs>
    ): Prisma__exercicioClient<exercicioGetPayload<T>>

    /**
     * Update one Exercicio.
     * @param {exercicioUpdateArgs} args - Arguments to update one Exercicio.
     * @example
     * // Update one Exercicio
     * const exercicio = await prisma.exercicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends exercicioUpdateArgs>(
      args: SelectSubset<T, exercicioUpdateArgs>
    ): Prisma__exercicioClient<exercicioGetPayload<T>>

    /**
     * Delete zero or more Exercicios.
     * @param {exercicioDeleteManyArgs} args - Arguments to filter Exercicios to delete.
     * @example
     * // Delete a few Exercicios
     * const { count } = await prisma.exercicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends exercicioDeleteManyArgs>(
      args?: SelectSubset<T, exercicioDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercicios
     * const exercicio = await prisma.exercicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends exercicioUpdateManyArgs>(
      args: SelectSubset<T, exercicioUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercicio.
     * @param {exercicioUpsertArgs} args - Arguments to update or create a Exercicio.
     * @example
     * // Update or create a Exercicio
     * const exercicio = await prisma.exercicio.upsert({
     *   create: {
     *     // ... data to create a Exercicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercicio we want to update
     *   }
     * })
    **/
    upsert<T extends exercicioUpsertArgs>(
      args: SelectSubset<T, exercicioUpsertArgs>
    ): Prisma__exercicioClient<exercicioGetPayload<T>>

    /**
     * Count the number of Exercicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercicioCountArgs} args - Arguments to filter Exercicios to count.
     * @example
     * // Count the number of Exercicios
     * const count = await prisma.exercicio.count({
     *   where: {
     *     // ... the filter for the Exercicios we want to count
     *   }
     * })
    **/
    count<T extends exercicioCountArgs>(
      args?: Subset<T, exercicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExercicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExercicioAggregateArgs>(args: Subset<T, ExercicioAggregateArgs>): Prisma.PrismaPromise<GetExercicioAggregateType<T>>

    /**
     * Group by Exercicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExercicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExercicioGroupByArgs['orderBy'] }
        : { orderBy?: ExercicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExercicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExercicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for exercicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__exercicioClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    musculatura<T extends musculaturaArgs= {}>(args?: Subset<T, musculaturaArgs>): Prisma__musculaturaClient<musculaturaGetPayload<T> | Null>;

    grupo_grupo_exercicio1Toexercicio<T extends exercicio$grupo_grupo_exercicio1ToexercicioArgs= {}>(args?: Subset<T, exercicio$grupo_grupo_exercicio1ToexercicioArgs>): Prisma.PrismaPromise<Array<grupoGetPayload<T>>| Null>;

    grupo_grupo_exercicio2Toexercicio<T extends exercicio$grupo_grupo_exercicio2ToexercicioArgs= {}>(args?: Subset<T, exercicio$grupo_grupo_exercicio2ToexercicioArgs>): Prisma.PrismaPromise<Array<grupoGetPayload<T>>| Null>;

    grupo_grupo_exercicio3Toexercicio<T extends exercicio$grupo_grupo_exercicio3ToexercicioArgs= {}>(args?: Subset<T, exercicio$grupo_grupo_exercicio3ToexercicioArgs>): Prisma.PrismaPromise<Array<grupoGetPayload<T>>| Null>;

    grupo_grupo_exercicio4Toexercicio<T extends exercicio$grupo_grupo_exercicio4ToexercicioArgs= {}>(args?: Subset<T, exercicio$grupo_grupo_exercicio4ToexercicioArgs>): Prisma.PrismaPromise<Array<grupoGetPayload<T>>| Null>;

    grupo_grupo_exercicio5Toexercicio<T extends exercicio$grupo_grupo_exercicio5ToexercicioArgs= {}>(args?: Subset<T, exercicio$grupo_grupo_exercicio5ToexercicioArgs>): Prisma.PrismaPromise<Array<grupoGetPayload<T>>| Null>;

    grupo_grupo_exercicio6Toexercicio<T extends exercicio$grupo_grupo_exercicio6ToexercicioArgs= {}>(args?: Subset<T, exercicio$grupo_grupo_exercicio6ToexercicioArgs>): Prisma.PrismaPromise<Array<grupoGetPayload<T>>| Null>;

    grupo_grupo_exercicio7Toexercicio<T extends exercicio$grupo_grupo_exercicio7ToexercicioArgs= {}>(args?: Subset<T, exercicio$grupo_grupo_exercicio7ToexercicioArgs>): Prisma.PrismaPromise<Array<grupoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * exercicio base type for findUnique actions
   */
  export type exercicioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the exercicio
     */
    select?: exercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: exercicioInclude | null
    /**
     * Filter, which exercicio to fetch.
     */
    where: exercicioWhereUniqueInput
  }

  /**
   * exercicio findUnique
   */
  export interface exercicioFindUniqueArgs extends exercicioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * exercicio findUniqueOrThrow
   */
  export type exercicioFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the exercicio
     */
    select?: exercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: exercicioInclude | null
    /**
     * Filter, which exercicio to fetch.
     */
    where: exercicioWhereUniqueInput
  }


  /**
   * exercicio base type for findFirst actions
   */
  export type exercicioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the exercicio
     */
    select?: exercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: exercicioInclude | null
    /**
     * Filter, which exercicio to fetch.
     */
    where?: exercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercicios to fetch.
     */
    orderBy?: Enumerable<exercicioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercicios.
     */
    cursor?: exercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercicios.
     */
    distinct?: Enumerable<ExercicioScalarFieldEnum>
  }

  /**
   * exercicio findFirst
   */
  export interface exercicioFindFirstArgs extends exercicioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * exercicio findFirstOrThrow
   */
  export type exercicioFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the exercicio
     */
    select?: exercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: exercicioInclude | null
    /**
     * Filter, which exercicio to fetch.
     */
    where?: exercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercicios to fetch.
     */
    orderBy?: Enumerable<exercicioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercicios.
     */
    cursor?: exercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercicios.
     */
    distinct?: Enumerable<ExercicioScalarFieldEnum>
  }


  /**
   * exercicio findMany
   */
  export type exercicioFindManyArgs = {
    /**
     * Select specific fields to fetch from the exercicio
     */
    select?: exercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: exercicioInclude | null
    /**
     * Filter, which exercicios to fetch.
     */
    where?: exercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercicios to fetch.
     */
    orderBy?: Enumerable<exercicioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing exercicios.
     */
    cursor?: exercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercicios.
     */
    skip?: number
    distinct?: Enumerable<ExercicioScalarFieldEnum>
  }


  /**
   * exercicio create
   */
  export type exercicioCreateArgs = {
    /**
     * Select specific fields to fetch from the exercicio
     */
    select?: exercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: exercicioInclude | null
    /**
     * The data needed to create a exercicio.
     */
    data: XOR<exercicioCreateInput, exercicioUncheckedCreateInput>
  }


  /**
   * exercicio createMany
   */
  export type exercicioCreateManyArgs = {
    /**
     * The data used to create many exercicios.
     */
    data: Enumerable<exercicioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * exercicio update
   */
  export type exercicioUpdateArgs = {
    /**
     * Select specific fields to fetch from the exercicio
     */
    select?: exercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: exercicioInclude | null
    /**
     * The data needed to update a exercicio.
     */
    data: XOR<exercicioUpdateInput, exercicioUncheckedUpdateInput>
    /**
     * Choose, which exercicio to update.
     */
    where: exercicioWhereUniqueInput
  }


  /**
   * exercicio updateMany
   */
  export type exercicioUpdateManyArgs = {
    /**
     * The data used to update exercicios.
     */
    data: XOR<exercicioUpdateManyMutationInput, exercicioUncheckedUpdateManyInput>
    /**
     * Filter which exercicios to update
     */
    where?: exercicioWhereInput
  }


  /**
   * exercicio upsert
   */
  export type exercicioUpsertArgs = {
    /**
     * Select specific fields to fetch from the exercicio
     */
    select?: exercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: exercicioInclude | null
    /**
     * The filter to search for the exercicio to update in case it exists.
     */
    where: exercicioWhereUniqueInput
    /**
     * In case the exercicio found by the `where` argument doesn't exist, create a new exercicio with this data.
     */
    create: XOR<exercicioCreateInput, exercicioUncheckedCreateInput>
    /**
     * In case the exercicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<exercicioUpdateInput, exercicioUncheckedUpdateInput>
  }


  /**
   * exercicio delete
   */
  export type exercicioDeleteArgs = {
    /**
     * Select specific fields to fetch from the exercicio
     */
    select?: exercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: exercicioInclude | null
    /**
     * Filter which exercicio to delete.
     */
    where: exercicioWhereUniqueInput
  }


  /**
   * exercicio deleteMany
   */
  export type exercicioDeleteManyArgs = {
    /**
     * Filter which exercicios to delete
     */
    where?: exercicioWhereInput
  }


  /**
   * exercicio.grupo_grupo_exercicio1Toexercicio
   */
  export type exercicio$grupo_grupo_exercicio1ToexercicioArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    where?: grupoWhereInput
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    cursor?: grupoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GrupoScalarFieldEnum>
  }


  /**
   * exercicio.grupo_grupo_exercicio2Toexercicio
   */
  export type exercicio$grupo_grupo_exercicio2ToexercicioArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    where?: grupoWhereInput
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    cursor?: grupoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GrupoScalarFieldEnum>
  }


  /**
   * exercicio.grupo_grupo_exercicio3Toexercicio
   */
  export type exercicio$grupo_grupo_exercicio3ToexercicioArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    where?: grupoWhereInput
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    cursor?: grupoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GrupoScalarFieldEnum>
  }


  /**
   * exercicio.grupo_grupo_exercicio4Toexercicio
   */
  export type exercicio$grupo_grupo_exercicio4ToexercicioArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    where?: grupoWhereInput
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    cursor?: grupoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GrupoScalarFieldEnum>
  }


  /**
   * exercicio.grupo_grupo_exercicio5Toexercicio
   */
  export type exercicio$grupo_grupo_exercicio5ToexercicioArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    where?: grupoWhereInput
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    cursor?: grupoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GrupoScalarFieldEnum>
  }


  /**
   * exercicio.grupo_grupo_exercicio6Toexercicio
   */
  export type exercicio$grupo_grupo_exercicio6ToexercicioArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    where?: grupoWhereInput
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    cursor?: grupoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GrupoScalarFieldEnum>
  }


  /**
   * exercicio.grupo_grupo_exercicio7Toexercicio
   */
  export type exercicio$grupo_grupo_exercicio7ToexercicioArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    where?: grupoWhereInput
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    cursor?: grupoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GrupoScalarFieldEnum>
  }


  /**
   * exercicio without action
   */
  export type exercicioArgs = {
    /**
     * Select specific fields to fetch from the exercicio
     */
    select?: exercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: exercicioInclude | null
  }



  /**
   * Model grupo
   */


  export type AggregateGrupo = {
    _count: GrupoCountAggregateOutputType | null
    _avg: GrupoAvgAggregateOutputType | null
    _sum: GrupoSumAggregateOutputType | null
    _min: GrupoMinAggregateOutputType | null
    _max: GrupoMaxAggregateOutputType | null
  }

  export type GrupoAvgAggregateOutputType = {
    id: number | null
    treinoId: number | null
    exercicio1: number | null
    exercicio2: number | null
    exercicio3: number | null
    exercicio4: number | null
    exercicio5: number | null
    exercicio6: number | null
    exercicio7: number | null
  }

  export type GrupoSumAggregateOutputType = {
    id: number | null
    treinoId: number | null
    exercicio1: number | null
    exercicio2: number | null
    exercicio3: number | null
    exercicio4: number | null
    exercicio5: number | null
    exercicio6: number | null
    exercicio7: number | null
  }

  export type GrupoMinAggregateOutputType = {
    id: number | null
    treinoId: number | null
    day: days | null
    exercicio1: number | null
    exercicio2: number | null
    exercicio3: number | null
    exercicio4: number | null
    exercicio5: number | null
    exercicio6: number | null
    exercicio7: number | null
  }

  export type GrupoMaxAggregateOutputType = {
    id: number | null
    treinoId: number | null
    day: days | null
    exercicio1: number | null
    exercicio2: number | null
    exercicio3: number | null
    exercicio4: number | null
    exercicio5: number | null
    exercicio6: number | null
    exercicio7: number | null
  }

  export type GrupoCountAggregateOutputType = {
    id: number
    treinoId: number
    day: number
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5: number
    exercicio6: number
    exercicio7: number
    _all: number
  }


  export type GrupoAvgAggregateInputType = {
    id?: true
    treinoId?: true
    exercicio1?: true
    exercicio2?: true
    exercicio3?: true
    exercicio4?: true
    exercicio5?: true
    exercicio6?: true
    exercicio7?: true
  }

  export type GrupoSumAggregateInputType = {
    id?: true
    treinoId?: true
    exercicio1?: true
    exercicio2?: true
    exercicio3?: true
    exercicio4?: true
    exercicio5?: true
    exercicio6?: true
    exercicio7?: true
  }

  export type GrupoMinAggregateInputType = {
    id?: true
    treinoId?: true
    day?: true
    exercicio1?: true
    exercicio2?: true
    exercicio3?: true
    exercicio4?: true
    exercicio5?: true
    exercicio6?: true
    exercicio7?: true
  }

  export type GrupoMaxAggregateInputType = {
    id?: true
    treinoId?: true
    day?: true
    exercicio1?: true
    exercicio2?: true
    exercicio3?: true
    exercicio4?: true
    exercicio5?: true
    exercicio6?: true
    exercicio7?: true
  }

  export type GrupoCountAggregateInputType = {
    id?: true
    treinoId?: true
    day?: true
    exercicio1?: true
    exercicio2?: true
    exercicio3?: true
    exercicio4?: true
    exercicio5?: true
    exercicio6?: true
    exercicio7?: true
    _all?: true
  }

  export type GrupoAggregateArgs = {
    /**
     * Filter which grupo to aggregate.
     */
    where?: grupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of grupos to fetch.
     */
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: grupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` grupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` grupos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned grupos
    **/
    _count?: true | GrupoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrupoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrupoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrupoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrupoMaxAggregateInputType
  }

  export type GetGrupoAggregateType<T extends GrupoAggregateArgs> = {
        [P in keyof T & keyof AggregateGrupo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrupo[P]>
      : GetScalarType<T[P], AggregateGrupo[P]>
  }




  export type GrupoGroupByArgs = {
    where?: grupoWhereInput
    orderBy?: Enumerable<grupoOrderByWithAggregationInput>
    by: GrupoScalarFieldEnum[]
    having?: grupoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrupoCountAggregateInputType | true
    _avg?: GrupoAvgAggregateInputType
    _sum?: GrupoSumAggregateInputType
    _min?: GrupoMinAggregateInputType
    _max?: GrupoMaxAggregateInputType
  }


  export type GrupoGroupByOutputType = {
    id: number
    treinoId: number
    day: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5: number | null
    exercicio6: number | null
    exercicio7: number | null
    _count: GrupoCountAggregateOutputType | null
    _avg: GrupoAvgAggregateOutputType | null
    _sum: GrupoSumAggregateOutputType | null
    _min: GrupoMinAggregateOutputType | null
    _max: GrupoMaxAggregateOutputType | null
  }

  type GetGrupoGroupByPayload<T extends GrupoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GrupoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrupoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrupoGroupByOutputType[P]>
            : GetScalarType<T[P], GrupoGroupByOutputType[P]>
        }
      >
    >


  export type grupoSelect = {
    id?: boolean
    treinoId?: boolean
    day?: boolean
    exercicio1?: boolean
    exercicio2?: boolean
    exercicio3?: boolean
    exercicio4?: boolean
    exercicio5?: boolean
    exercicio6?: boolean
    exercicio7?: boolean
    treino?: boolean | treinoArgs
    exercicio_grupo_exercicio1Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio2Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio3Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio4Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio5Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio6Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio7Toexercicio?: boolean | exercicioArgs
  }


  export type grupoInclude = {
    treino?: boolean | treinoArgs
    exercicio_grupo_exercicio1Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio2Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio3Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio4Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio5Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio6Toexercicio?: boolean | exercicioArgs
    exercicio_grupo_exercicio7Toexercicio?: boolean | exercicioArgs
  }

  export type grupoGetPayload<S extends boolean | null | undefined | grupoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? grupo :
    S extends undefined ? never :
    S extends { include: any } & (grupoArgs | grupoFindManyArgs)
    ? grupo  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'treino' ? treinoGetPayload<S['include'][P]> :
        P extends 'exercicio_grupo_exercicio1Toexercicio' ? exercicioGetPayload<S['include'][P]> :
        P extends 'exercicio_grupo_exercicio2Toexercicio' ? exercicioGetPayload<S['include'][P]> :
        P extends 'exercicio_grupo_exercicio3Toexercicio' ? exercicioGetPayload<S['include'][P]> :
        P extends 'exercicio_grupo_exercicio4Toexercicio' ? exercicioGetPayload<S['include'][P]> :
        P extends 'exercicio_grupo_exercicio5Toexercicio' ? exercicioGetPayload<S['include'][P]> | null :
        P extends 'exercicio_grupo_exercicio6Toexercicio' ? exercicioGetPayload<S['include'][P]> | null :
        P extends 'exercicio_grupo_exercicio7Toexercicio' ? exercicioGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (grupoArgs | grupoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'treino' ? treinoGetPayload<S['select'][P]> :
        P extends 'exercicio_grupo_exercicio1Toexercicio' ? exercicioGetPayload<S['select'][P]> :
        P extends 'exercicio_grupo_exercicio2Toexercicio' ? exercicioGetPayload<S['select'][P]> :
        P extends 'exercicio_grupo_exercicio3Toexercicio' ? exercicioGetPayload<S['select'][P]> :
        P extends 'exercicio_grupo_exercicio4Toexercicio' ? exercicioGetPayload<S['select'][P]> :
        P extends 'exercicio_grupo_exercicio5Toexercicio' ? exercicioGetPayload<S['select'][P]> | null :
        P extends 'exercicio_grupo_exercicio6Toexercicio' ? exercicioGetPayload<S['select'][P]> | null :
        P extends 'exercicio_grupo_exercicio7Toexercicio' ? exercicioGetPayload<S['select'][P]> | null :  P extends keyof grupo ? grupo[P] : never
  } 
      : grupo


  type grupoCountArgs = 
    Omit<grupoFindManyArgs, 'select' | 'include'> & {
      select?: GrupoCountAggregateInputType | true
    }

  export interface grupoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Grupo that matches the filter.
     * @param {grupoFindUniqueArgs} args - Arguments to find a Grupo
     * @example
     * // Get one Grupo
     * const grupo = await prisma.grupo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends grupoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, grupoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'grupo'> extends True ? Prisma__grupoClient<grupoGetPayload<T>> : Prisma__grupoClient<grupoGetPayload<T> | null, null>

    /**
     * Find one Grupo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {grupoFindUniqueOrThrowArgs} args - Arguments to find a Grupo
     * @example
     * // Get one Grupo
     * const grupo = await prisma.grupo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends grupoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, grupoFindUniqueOrThrowArgs>
    ): Prisma__grupoClient<grupoGetPayload<T>>

    /**
     * Find the first Grupo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {grupoFindFirstArgs} args - Arguments to find a Grupo
     * @example
     * // Get one Grupo
     * const grupo = await prisma.grupo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends grupoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, grupoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'grupo'> extends True ? Prisma__grupoClient<grupoGetPayload<T>> : Prisma__grupoClient<grupoGetPayload<T> | null, null>

    /**
     * Find the first Grupo that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {grupoFindFirstOrThrowArgs} args - Arguments to find a Grupo
     * @example
     * // Get one Grupo
     * const grupo = await prisma.grupo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends grupoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, grupoFindFirstOrThrowArgs>
    ): Prisma__grupoClient<grupoGetPayload<T>>

    /**
     * Find zero or more Grupos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {grupoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grupos
     * const grupos = await prisma.grupo.findMany()
     * 
     * // Get first 10 Grupos
     * const grupos = await prisma.grupo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grupoWithIdOnly = await prisma.grupo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends grupoFindManyArgs>(
      args?: SelectSubset<T, grupoFindManyArgs>
    ): Prisma.PrismaPromise<Array<grupoGetPayload<T>>>

    /**
     * Create a Grupo.
     * @param {grupoCreateArgs} args - Arguments to create a Grupo.
     * @example
     * // Create one Grupo
     * const Grupo = await prisma.grupo.create({
     *   data: {
     *     // ... data to create a Grupo
     *   }
     * })
     * 
    **/
    create<T extends grupoCreateArgs>(
      args: SelectSubset<T, grupoCreateArgs>
    ): Prisma__grupoClient<grupoGetPayload<T>>

    /**
     * Create many Grupos.
     *     @param {grupoCreateManyArgs} args - Arguments to create many Grupos.
     *     @example
     *     // Create many Grupos
     *     const grupo = await prisma.grupo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends grupoCreateManyArgs>(
      args?: SelectSubset<T, grupoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Grupo.
     * @param {grupoDeleteArgs} args - Arguments to delete one Grupo.
     * @example
     * // Delete one Grupo
     * const Grupo = await prisma.grupo.delete({
     *   where: {
     *     // ... filter to delete one Grupo
     *   }
     * })
     * 
    **/
    delete<T extends grupoDeleteArgs>(
      args: SelectSubset<T, grupoDeleteArgs>
    ): Prisma__grupoClient<grupoGetPayload<T>>

    /**
     * Update one Grupo.
     * @param {grupoUpdateArgs} args - Arguments to update one Grupo.
     * @example
     * // Update one Grupo
     * const grupo = await prisma.grupo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends grupoUpdateArgs>(
      args: SelectSubset<T, grupoUpdateArgs>
    ): Prisma__grupoClient<grupoGetPayload<T>>

    /**
     * Delete zero or more Grupos.
     * @param {grupoDeleteManyArgs} args - Arguments to filter Grupos to delete.
     * @example
     * // Delete a few Grupos
     * const { count } = await prisma.grupo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends grupoDeleteManyArgs>(
      args?: SelectSubset<T, grupoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grupos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {grupoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grupos
     * const grupo = await prisma.grupo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends grupoUpdateManyArgs>(
      args: SelectSubset<T, grupoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grupo.
     * @param {grupoUpsertArgs} args - Arguments to update or create a Grupo.
     * @example
     * // Update or create a Grupo
     * const grupo = await prisma.grupo.upsert({
     *   create: {
     *     // ... data to create a Grupo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grupo we want to update
     *   }
     * })
    **/
    upsert<T extends grupoUpsertArgs>(
      args: SelectSubset<T, grupoUpsertArgs>
    ): Prisma__grupoClient<grupoGetPayload<T>>

    /**
     * Count the number of Grupos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {grupoCountArgs} args - Arguments to filter Grupos to count.
     * @example
     * // Count the number of Grupos
     * const count = await prisma.grupo.count({
     *   where: {
     *     // ... the filter for the Grupos we want to count
     *   }
     * })
    **/
    count<T extends grupoCountArgs>(
      args?: Subset<T, grupoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrupoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grupo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrupoAggregateArgs>(args: Subset<T, GrupoAggregateArgs>): Prisma.PrismaPromise<GetGrupoAggregateType<T>>

    /**
     * Group by Grupo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrupoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrupoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrupoGroupByArgs['orderBy'] }
        : { orderBy?: GrupoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrupoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrupoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for grupo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__grupoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    treino<T extends treinoArgs= {}>(args?: Subset<T, treinoArgs>): Prisma__treinoClient<treinoGetPayload<T> | Null>;

    exercicio_grupo_exercicio1Toexercicio<T extends exercicioArgs= {}>(args?: Subset<T, exercicioArgs>): Prisma__exercicioClient<exercicioGetPayload<T> | Null>;

    exercicio_grupo_exercicio2Toexercicio<T extends exercicioArgs= {}>(args?: Subset<T, exercicioArgs>): Prisma__exercicioClient<exercicioGetPayload<T> | Null>;

    exercicio_grupo_exercicio3Toexercicio<T extends exercicioArgs= {}>(args?: Subset<T, exercicioArgs>): Prisma__exercicioClient<exercicioGetPayload<T> | Null>;

    exercicio_grupo_exercicio4Toexercicio<T extends exercicioArgs= {}>(args?: Subset<T, exercicioArgs>): Prisma__exercicioClient<exercicioGetPayload<T> | Null>;

    exercicio_grupo_exercicio5Toexercicio<T extends exercicioArgs= {}>(args?: Subset<T, exercicioArgs>): Prisma__exercicioClient<exercicioGetPayload<T> | Null>;

    exercicio_grupo_exercicio6Toexercicio<T extends exercicioArgs= {}>(args?: Subset<T, exercicioArgs>): Prisma__exercicioClient<exercicioGetPayload<T> | Null>;

    exercicio_grupo_exercicio7Toexercicio<T extends exercicioArgs= {}>(args?: Subset<T, exercicioArgs>): Prisma__exercicioClient<exercicioGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * grupo base type for findUnique actions
   */
  export type grupoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    /**
     * Filter, which grupo to fetch.
     */
    where: grupoWhereUniqueInput
  }

  /**
   * grupo findUnique
   */
  export interface grupoFindUniqueArgs extends grupoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * grupo findUniqueOrThrow
   */
  export type grupoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    /**
     * Filter, which grupo to fetch.
     */
    where: grupoWhereUniqueInput
  }


  /**
   * grupo base type for findFirst actions
   */
  export type grupoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    /**
     * Filter, which grupo to fetch.
     */
    where?: grupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of grupos to fetch.
     */
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for grupos.
     */
    cursor?: grupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` grupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` grupos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of grupos.
     */
    distinct?: Enumerable<GrupoScalarFieldEnum>
  }

  /**
   * grupo findFirst
   */
  export interface grupoFindFirstArgs extends grupoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * grupo findFirstOrThrow
   */
  export type grupoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    /**
     * Filter, which grupo to fetch.
     */
    where?: grupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of grupos to fetch.
     */
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for grupos.
     */
    cursor?: grupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` grupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` grupos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of grupos.
     */
    distinct?: Enumerable<GrupoScalarFieldEnum>
  }


  /**
   * grupo findMany
   */
  export type grupoFindManyArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    /**
     * Filter, which grupos to fetch.
     */
    where?: grupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of grupos to fetch.
     */
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing grupos.
     */
    cursor?: grupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` grupos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` grupos.
     */
    skip?: number
    distinct?: Enumerable<GrupoScalarFieldEnum>
  }


  /**
   * grupo create
   */
  export type grupoCreateArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    /**
     * The data needed to create a grupo.
     */
    data: XOR<grupoCreateInput, grupoUncheckedCreateInput>
  }


  /**
   * grupo createMany
   */
  export type grupoCreateManyArgs = {
    /**
     * The data used to create many grupos.
     */
    data: Enumerable<grupoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * grupo update
   */
  export type grupoUpdateArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    /**
     * The data needed to update a grupo.
     */
    data: XOR<grupoUpdateInput, grupoUncheckedUpdateInput>
    /**
     * Choose, which grupo to update.
     */
    where: grupoWhereUniqueInput
  }


  /**
   * grupo updateMany
   */
  export type grupoUpdateManyArgs = {
    /**
     * The data used to update grupos.
     */
    data: XOR<grupoUpdateManyMutationInput, grupoUncheckedUpdateManyInput>
    /**
     * Filter which grupos to update
     */
    where?: grupoWhereInput
  }


  /**
   * grupo upsert
   */
  export type grupoUpsertArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    /**
     * The filter to search for the grupo to update in case it exists.
     */
    where: grupoWhereUniqueInput
    /**
     * In case the grupo found by the `where` argument doesn't exist, create a new grupo with this data.
     */
    create: XOR<grupoCreateInput, grupoUncheckedCreateInput>
    /**
     * In case the grupo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<grupoUpdateInput, grupoUncheckedUpdateInput>
  }


  /**
   * grupo delete
   */
  export type grupoDeleteArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    /**
     * Filter which grupo to delete.
     */
    where: grupoWhereUniqueInput
  }


  /**
   * grupo deleteMany
   */
  export type grupoDeleteManyArgs = {
    /**
     * Filter which grupos to delete
     */
    where?: grupoWhereInput
  }


  /**
   * grupo without action
   */
  export type grupoArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
  }



  /**
   * Model musculatura
   */


  export type AggregateMusculatura = {
    _count: MusculaturaCountAggregateOutputType | null
    _avg: MusculaturaAvgAggregateOutputType | null
    _sum: MusculaturaSumAggregateOutputType | null
    _min: MusculaturaMinAggregateOutputType | null
    _max: MusculaturaMaxAggregateOutputType | null
  }

  export type MusculaturaAvgAggregateOutputType = {
    id: number | null
  }

  export type MusculaturaSumAggregateOutputType = {
    id: number | null
  }

  export type MusculaturaMinAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
  }

  export type MusculaturaMaxAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
  }

  export type MusculaturaCountAggregateOutputType = {
    id: number
    name: number
    image: number
    _all: number
  }


  export type MusculaturaAvgAggregateInputType = {
    id?: true
  }

  export type MusculaturaSumAggregateInputType = {
    id?: true
  }

  export type MusculaturaMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
  }

  export type MusculaturaMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
  }

  export type MusculaturaCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    _all?: true
  }

  export type MusculaturaAggregateArgs = {
    /**
     * Filter which musculatura to aggregate.
     */
    where?: musculaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of musculaturas to fetch.
     */
    orderBy?: Enumerable<musculaturaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: musculaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` musculaturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` musculaturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned musculaturas
    **/
    _count?: true | MusculaturaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MusculaturaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MusculaturaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MusculaturaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MusculaturaMaxAggregateInputType
  }

  export type GetMusculaturaAggregateType<T extends MusculaturaAggregateArgs> = {
        [P in keyof T & keyof AggregateMusculatura]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMusculatura[P]>
      : GetScalarType<T[P], AggregateMusculatura[P]>
  }




  export type MusculaturaGroupByArgs = {
    where?: musculaturaWhereInput
    orderBy?: Enumerable<musculaturaOrderByWithAggregationInput>
    by: MusculaturaScalarFieldEnum[]
    having?: musculaturaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MusculaturaCountAggregateInputType | true
    _avg?: MusculaturaAvgAggregateInputType
    _sum?: MusculaturaSumAggregateInputType
    _min?: MusculaturaMinAggregateInputType
    _max?: MusculaturaMaxAggregateInputType
  }


  export type MusculaturaGroupByOutputType = {
    id: number
    name: string
    image: string
    _count: MusculaturaCountAggregateOutputType | null
    _avg: MusculaturaAvgAggregateOutputType | null
    _sum: MusculaturaSumAggregateOutputType | null
    _min: MusculaturaMinAggregateOutputType | null
    _max: MusculaturaMaxAggregateOutputType | null
  }

  type GetMusculaturaGroupByPayload<T extends MusculaturaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MusculaturaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MusculaturaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MusculaturaGroupByOutputType[P]>
            : GetScalarType<T[P], MusculaturaGroupByOutputType[P]>
        }
      >
    >


  export type musculaturaSelect = {
    id?: boolean
    name?: boolean
    image?: boolean
    exercicio?: boolean | musculatura$exercicioArgs
    _count?: boolean | MusculaturaCountOutputTypeArgs
  }


  export type musculaturaInclude = {
    exercicio?: boolean | musculatura$exercicioArgs
    _count?: boolean | MusculaturaCountOutputTypeArgs
  }

  export type musculaturaGetPayload<S extends boolean | null | undefined | musculaturaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? musculatura :
    S extends undefined ? never :
    S extends { include: any } & (musculaturaArgs | musculaturaFindManyArgs)
    ? musculatura  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'exercicio' ? Array < exercicioGetPayload<S['include'][P]>>  :
        P extends '_count' ? MusculaturaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (musculaturaArgs | musculaturaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'exercicio' ? Array < exercicioGetPayload<S['select'][P]>>  :
        P extends '_count' ? MusculaturaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof musculatura ? musculatura[P] : never
  } 
      : musculatura


  type musculaturaCountArgs = 
    Omit<musculaturaFindManyArgs, 'select' | 'include'> & {
      select?: MusculaturaCountAggregateInputType | true
    }

  export interface musculaturaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Musculatura that matches the filter.
     * @param {musculaturaFindUniqueArgs} args - Arguments to find a Musculatura
     * @example
     * // Get one Musculatura
     * const musculatura = await prisma.musculatura.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends musculaturaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, musculaturaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'musculatura'> extends True ? Prisma__musculaturaClient<musculaturaGetPayload<T>> : Prisma__musculaturaClient<musculaturaGetPayload<T> | null, null>

    /**
     * Find one Musculatura that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {musculaturaFindUniqueOrThrowArgs} args - Arguments to find a Musculatura
     * @example
     * // Get one Musculatura
     * const musculatura = await prisma.musculatura.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends musculaturaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, musculaturaFindUniqueOrThrowArgs>
    ): Prisma__musculaturaClient<musculaturaGetPayload<T>>

    /**
     * Find the first Musculatura that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musculaturaFindFirstArgs} args - Arguments to find a Musculatura
     * @example
     * // Get one Musculatura
     * const musculatura = await prisma.musculatura.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends musculaturaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, musculaturaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'musculatura'> extends True ? Prisma__musculaturaClient<musculaturaGetPayload<T>> : Prisma__musculaturaClient<musculaturaGetPayload<T> | null, null>

    /**
     * Find the first Musculatura that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musculaturaFindFirstOrThrowArgs} args - Arguments to find a Musculatura
     * @example
     * // Get one Musculatura
     * const musculatura = await prisma.musculatura.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends musculaturaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, musculaturaFindFirstOrThrowArgs>
    ): Prisma__musculaturaClient<musculaturaGetPayload<T>>

    /**
     * Find zero or more Musculaturas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musculaturaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Musculaturas
     * const musculaturas = await prisma.musculatura.findMany()
     * 
     * // Get first 10 Musculaturas
     * const musculaturas = await prisma.musculatura.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const musculaturaWithIdOnly = await prisma.musculatura.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends musculaturaFindManyArgs>(
      args?: SelectSubset<T, musculaturaFindManyArgs>
    ): Prisma.PrismaPromise<Array<musculaturaGetPayload<T>>>

    /**
     * Create a Musculatura.
     * @param {musculaturaCreateArgs} args - Arguments to create a Musculatura.
     * @example
     * // Create one Musculatura
     * const Musculatura = await prisma.musculatura.create({
     *   data: {
     *     // ... data to create a Musculatura
     *   }
     * })
     * 
    **/
    create<T extends musculaturaCreateArgs>(
      args: SelectSubset<T, musculaturaCreateArgs>
    ): Prisma__musculaturaClient<musculaturaGetPayload<T>>

    /**
     * Create many Musculaturas.
     *     @param {musculaturaCreateManyArgs} args - Arguments to create many Musculaturas.
     *     @example
     *     // Create many Musculaturas
     *     const musculatura = await prisma.musculatura.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends musculaturaCreateManyArgs>(
      args?: SelectSubset<T, musculaturaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Musculatura.
     * @param {musculaturaDeleteArgs} args - Arguments to delete one Musculatura.
     * @example
     * // Delete one Musculatura
     * const Musculatura = await prisma.musculatura.delete({
     *   where: {
     *     // ... filter to delete one Musculatura
     *   }
     * })
     * 
    **/
    delete<T extends musculaturaDeleteArgs>(
      args: SelectSubset<T, musculaturaDeleteArgs>
    ): Prisma__musculaturaClient<musculaturaGetPayload<T>>

    /**
     * Update one Musculatura.
     * @param {musculaturaUpdateArgs} args - Arguments to update one Musculatura.
     * @example
     * // Update one Musculatura
     * const musculatura = await prisma.musculatura.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends musculaturaUpdateArgs>(
      args: SelectSubset<T, musculaturaUpdateArgs>
    ): Prisma__musculaturaClient<musculaturaGetPayload<T>>

    /**
     * Delete zero or more Musculaturas.
     * @param {musculaturaDeleteManyArgs} args - Arguments to filter Musculaturas to delete.
     * @example
     * // Delete a few Musculaturas
     * const { count } = await prisma.musculatura.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends musculaturaDeleteManyArgs>(
      args?: SelectSubset<T, musculaturaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Musculaturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musculaturaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Musculaturas
     * const musculatura = await prisma.musculatura.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends musculaturaUpdateManyArgs>(
      args: SelectSubset<T, musculaturaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Musculatura.
     * @param {musculaturaUpsertArgs} args - Arguments to update or create a Musculatura.
     * @example
     * // Update or create a Musculatura
     * const musculatura = await prisma.musculatura.upsert({
     *   create: {
     *     // ... data to create a Musculatura
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Musculatura we want to update
     *   }
     * })
    **/
    upsert<T extends musculaturaUpsertArgs>(
      args: SelectSubset<T, musculaturaUpsertArgs>
    ): Prisma__musculaturaClient<musculaturaGetPayload<T>>

    /**
     * Count the number of Musculaturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musculaturaCountArgs} args - Arguments to filter Musculaturas to count.
     * @example
     * // Count the number of Musculaturas
     * const count = await prisma.musculatura.count({
     *   where: {
     *     // ... the filter for the Musculaturas we want to count
     *   }
     * })
    **/
    count<T extends musculaturaCountArgs>(
      args?: Subset<T, musculaturaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MusculaturaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Musculatura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusculaturaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MusculaturaAggregateArgs>(args: Subset<T, MusculaturaAggregateArgs>): Prisma.PrismaPromise<GetMusculaturaAggregateType<T>>

    /**
     * Group by Musculatura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusculaturaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MusculaturaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MusculaturaGroupByArgs['orderBy'] }
        : { orderBy?: MusculaturaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MusculaturaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMusculaturaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for musculatura.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__musculaturaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    exercicio<T extends musculatura$exercicioArgs= {}>(args?: Subset<T, musculatura$exercicioArgs>): Prisma.PrismaPromise<Array<exercicioGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * musculatura base type for findUnique actions
   */
  export type musculaturaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the musculatura
     */
    select?: musculaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: musculaturaInclude | null
    /**
     * Filter, which musculatura to fetch.
     */
    where: musculaturaWhereUniqueInput
  }

  /**
   * musculatura findUnique
   */
  export interface musculaturaFindUniqueArgs extends musculaturaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * musculatura findUniqueOrThrow
   */
  export type musculaturaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the musculatura
     */
    select?: musculaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: musculaturaInclude | null
    /**
     * Filter, which musculatura to fetch.
     */
    where: musculaturaWhereUniqueInput
  }


  /**
   * musculatura base type for findFirst actions
   */
  export type musculaturaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the musculatura
     */
    select?: musculaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: musculaturaInclude | null
    /**
     * Filter, which musculatura to fetch.
     */
    where?: musculaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of musculaturas to fetch.
     */
    orderBy?: Enumerable<musculaturaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for musculaturas.
     */
    cursor?: musculaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` musculaturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` musculaturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of musculaturas.
     */
    distinct?: Enumerable<MusculaturaScalarFieldEnum>
  }

  /**
   * musculatura findFirst
   */
  export interface musculaturaFindFirstArgs extends musculaturaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * musculatura findFirstOrThrow
   */
  export type musculaturaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the musculatura
     */
    select?: musculaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: musculaturaInclude | null
    /**
     * Filter, which musculatura to fetch.
     */
    where?: musculaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of musculaturas to fetch.
     */
    orderBy?: Enumerable<musculaturaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for musculaturas.
     */
    cursor?: musculaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` musculaturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` musculaturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of musculaturas.
     */
    distinct?: Enumerable<MusculaturaScalarFieldEnum>
  }


  /**
   * musculatura findMany
   */
  export type musculaturaFindManyArgs = {
    /**
     * Select specific fields to fetch from the musculatura
     */
    select?: musculaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: musculaturaInclude | null
    /**
     * Filter, which musculaturas to fetch.
     */
    where?: musculaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of musculaturas to fetch.
     */
    orderBy?: Enumerable<musculaturaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing musculaturas.
     */
    cursor?: musculaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` musculaturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` musculaturas.
     */
    skip?: number
    distinct?: Enumerable<MusculaturaScalarFieldEnum>
  }


  /**
   * musculatura create
   */
  export type musculaturaCreateArgs = {
    /**
     * Select specific fields to fetch from the musculatura
     */
    select?: musculaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: musculaturaInclude | null
    /**
     * The data needed to create a musculatura.
     */
    data: XOR<musculaturaCreateInput, musculaturaUncheckedCreateInput>
  }


  /**
   * musculatura createMany
   */
  export type musculaturaCreateManyArgs = {
    /**
     * The data used to create many musculaturas.
     */
    data: Enumerable<musculaturaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * musculatura update
   */
  export type musculaturaUpdateArgs = {
    /**
     * Select specific fields to fetch from the musculatura
     */
    select?: musculaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: musculaturaInclude | null
    /**
     * The data needed to update a musculatura.
     */
    data: XOR<musculaturaUpdateInput, musculaturaUncheckedUpdateInput>
    /**
     * Choose, which musculatura to update.
     */
    where: musculaturaWhereUniqueInput
  }


  /**
   * musculatura updateMany
   */
  export type musculaturaUpdateManyArgs = {
    /**
     * The data used to update musculaturas.
     */
    data: XOR<musculaturaUpdateManyMutationInput, musculaturaUncheckedUpdateManyInput>
    /**
     * Filter which musculaturas to update
     */
    where?: musculaturaWhereInput
  }


  /**
   * musculatura upsert
   */
  export type musculaturaUpsertArgs = {
    /**
     * Select specific fields to fetch from the musculatura
     */
    select?: musculaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: musculaturaInclude | null
    /**
     * The filter to search for the musculatura to update in case it exists.
     */
    where: musculaturaWhereUniqueInput
    /**
     * In case the musculatura found by the `where` argument doesn't exist, create a new musculatura with this data.
     */
    create: XOR<musculaturaCreateInput, musculaturaUncheckedCreateInput>
    /**
     * In case the musculatura was found with the provided `where` argument, update it with this data.
     */
    update: XOR<musculaturaUpdateInput, musculaturaUncheckedUpdateInput>
  }


  /**
   * musculatura delete
   */
  export type musculaturaDeleteArgs = {
    /**
     * Select specific fields to fetch from the musculatura
     */
    select?: musculaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: musculaturaInclude | null
    /**
     * Filter which musculatura to delete.
     */
    where: musculaturaWhereUniqueInput
  }


  /**
   * musculatura deleteMany
   */
  export type musculaturaDeleteManyArgs = {
    /**
     * Filter which musculaturas to delete
     */
    where?: musculaturaWhereInput
  }


  /**
   * musculatura.exercicio
   */
  export type musculatura$exercicioArgs = {
    /**
     * Select specific fields to fetch from the exercicio
     */
    select?: exercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: exercicioInclude | null
    where?: exercicioWhereInput
    orderBy?: Enumerable<exercicioOrderByWithRelationInput>
    cursor?: exercicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ExercicioScalarFieldEnum>
  }


  /**
   * musculatura without action
   */
  export type musculaturaArgs = {
    /**
     * Select specific fields to fetch from the musculatura
     */
    select?: musculaturaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: musculaturaInclude | null
  }



  /**
   * Model treino
   */


  export type AggregateTreino = {
    _count: TreinoCountAggregateOutputType | null
    _avg: TreinoAvgAggregateOutputType | null
    _sum: TreinoSumAggregateOutputType | null
    _min: TreinoMinAggregateOutputType | null
    _max: TreinoMaxAggregateOutputType | null
  }

  export type TreinoAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    divisaoId: number | null
  }

  export type TreinoSumAggregateOutputType = {
    id: number | null
    userId: number | null
    divisaoId: number | null
  }

  export type TreinoMinAggregateOutputType = {
    id: number | null
    userId: number | null
    divisaoId: number | null
  }

  export type TreinoMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    divisaoId: number | null
  }

  export type TreinoCountAggregateOutputType = {
    id: number
    userId: number
    divisaoId: number
    _all: number
  }


  export type TreinoAvgAggregateInputType = {
    id?: true
    userId?: true
    divisaoId?: true
  }

  export type TreinoSumAggregateInputType = {
    id?: true
    userId?: true
    divisaoId?: true
  }

  export type TreinoMinAggregateInputType = {
    id?: true
    userId?: true
    divisaoId?: true
  }

  export type TreinoMaxAggregateInputType = {
    id?: true
    userId?: true
    divisaoId?: true
  }

  export type TreinoCountAggregateInputType = {
    id?: true
    userId?: true
    divisaoId?: true
    _all?: true
  }

  export type TreinoAggregateArgs = {
    /**
     * Filter which treino to aggregate.
     */
    where?: treinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of treinos to fetch.
     */
    orderBy?: Enumerable<treinoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: treinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` treinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned treinos
    **/
    _count?: true | TreinoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TreinoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TreinoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreinoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreinoMaxAggregateInputType
  }

  export type GetTreinoAggregateType<T extends TreinoAggregateArgs> = {
        [P in keyof T & keyof AggregateTreino]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreino[P]>
      : GetScalarType<T[P], AggregateTreino[P]>
  }




  export type TreinoGroupByArgs = {
    where?: treinoWhereInput
    orderBy?: Enumerable<treinoOrderByWithAggregationInput>
    by: TreinoScalarFieldEnum[]
    having?: treinoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreinoCountAggregateInputType | true
    _avg?: TreinoAvgAggregateInputType
    _sum?: TreinoSumAggregateInputType
    _min?: TreinoMinAggregateInputType
    _max?: TreinoMaxAggregateInputType
  }


  export type TreinoGroupByOutputType = {
    id: number
    userId: number
    divisaoId: number
    _count: TreinoCountAggregateOutputType | null
    _avg: TreinoAvgAggregateOutputType | null
    _sum: TreinoSumAggregateOutputType | null
    _min: TreinoMinAggregateOutputType | null
    _max: TreinoMaxAggregateOutputType | null
  }

  type GetTreinoGroupByPayload<T extends TreinoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TreinoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreinoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreinoGroupByOutputType[P]>
            : GetScalarType<T[P], TreinoGroupByOutputType[P]>
        }
      >
    >


  export type treinoSelect = {
    id?: boolean
    userId?: boolean
    divisaoId?: boolean
    grupo?: boolean | treino$grupoArgs
    user?: boolean | userArgs
    divisao?: boolean | divisaoArgs
    _count?: boolean | TreinoCountOutputTypeArgs
  }


  export type treinoInclude = {
    grupo?: boolean | treino$grupoArgs
    user?: boolean | userArgs
    divisao?: boolean | divisaoArgs
    _count?: boolean | TreinoCountOutputTypeArgs
  }

  export type treinoGetPayload<S extends boolean | null | undefined | treinoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? treino :
    S extends undefined ? never :
    S extends { include: any } & (treinoArgs | treinoFindManyArgs)
    ? treino  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'grupo' ? Array < grupoGetPayload<S['include'][P]>>  :
        P extends 'user' ? userGetPayload<S['include'][P]> :
        P extends 'divisao' ? divisaoGetPayload<S['include'][P]> :
        P extends '_count' ? TreinoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (treinoArgs | treinoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'grupo' ? Array < grupoGetPayload<S['select'][P]>>  :
        P extends 'user' ? userGetPayload<S['select'][P]> :
        P extends 'divisao' ? divisaoGetPayload<S['select'][P]> :
        P extends '_count' ? TreinoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof treino ? treino[P] : never
  } 
      : treino


  type treinoCountArgs = 
    Omit<treinoFindManyArgs, 'select' | 'include'> & {
      select?: TreinoCountAggregateInputType | true
    }

  export interface treinoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Treino that matches the filter.
     * @param {treinoFindUniqueArgs} args - Arguments to find a Treino
     * @example
     * // Get one Treino
     * const treino = await prisma.treino.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends treinoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, treinoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'treino'> extends True ? Prisma__treinoClient<treinoGetPayload<T>> : Prisma__treinoClient<treinoGetPayload<T> | null, null>

    /**
     * Find one Treino that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {treinoFindUniqueOrThrowArgs} args - Arguments to find a Treino
     * @example
     * // Get one Treino
     * const treino = await prisma.treino.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends treinoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, treinoFindUniqueOrThrowArgs>
    ): Prisma__treinoClient<treinoGetPayload<T>>

    /**
     * Find the first Treino that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {treinoFindFirstArgs} args - Arguments to find a Treino
     * @example
     * // Get one Treino
     * const treino = await prisma.treino.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends treinoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, treinoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'treino'> extends True ? Prisma__treinoClient<treinoGetPayload<T>> : Prisma__treinoClient<treinoGetPayload<T> | null, null>

    /**
     * Find the first Treino that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {treinoFindFirstOrThrowArgs} args - Arguments to find a Treino
     * @example
     * // Get one Treino
     * const treino = await prisma.treino.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends treinoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, treinoFindFirstOrThrowArgs>
    ): Prisma__treinoClient<treinoGetPayload<T>>

    /**
     * Find zero or more Treinos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {treinoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Treinos
     * const treinos = await prisma.treino.findMany()
     * 
     * // Get first 10 Treinos
     * const treinos = await prisma.treino.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treinoWithIdOnly = await prisma.treino.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends treinoFindManyArgs>(
      args?: SelectSubset<T, treinoFindManyArgs>
    ): Prisma.PrismaPromise<Array<treinoGetPayload<T>>>

    /**
     * Create a Treino.
     * @param {treinoCreateArgs} args - Arguments to create a Treino.
     * @example
     * // Create one Treino
     * const Treino = await prisma.treino.create({
     *   data: {
     *     // ... data to create a Treino
     *   }
     * })
     * 
    **/
    create<T extends treinoCreateArgs>(
      args: SelectSubset<T, treinoCreateArgs>
    ): Prisma__treinoClient<treinoGetPayload<T>>

    /**
     * Create many Treinos.
     *     @param {treinoCreateManyArgs} args - Arguments to create many Treinos.
     *     @example
     *     // Create many Treinos
     *     const treino = await prisma.treino.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends treinoCreateManyArgs>(
      args?: SelectSubset<T, treinoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Treino.
     * @param {treinoDeleteArgs} args - Arguments to delete one Treino.
     * @example
     * // Delete one Treino
     * const Treino = await prisma.treino.delete({
     *   where: {
     *     // ... filter to delete one Treino
     *   }
     * })
     * 
    **/
    delete<T extends treinoDeleteArgs>(
      args: SelectSubset<T, treinoDeleteArgs>
    ): Prisma__treinoClient<treinoGetPayload<T>>

    /**
     * Update one Treino.
     * @param {treinoUpdateArgs} args - Arguments to update one Treino.
     * @example
     * // Update one Treino
     * const treino = await prisma.treino.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends treinoUpdateArgs>(
      args: SelectSubset<T, treinoUpdateArgs>
    ): Prisma__treinoClient<treinoGetPayload<T>>

    /**
     * Delete zero or more Treinos.
     * @param {treinoDeleteManyArgs} args - Arguments to filter Treinos to delete.
     * @example
     * // Delete a few Treinos
     * const { count } = await prisma.treino.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends treinoDeleteManyArgs>(
      args?: SelectSubset<T, treinoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Treinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {treinoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Treinos
     * const treino = await prisma.treino.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends treinoUpdateManyArgs>(
      args: SelectSubset<T, treinoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Treino.
     * @param {treinoUpsertArgs} args - Arguments to update or create a Treino.
     * @example
     * // Update or create a Treino
     * const treino = await prisma.treino.upsert({
     *   create: {
     *     // ... data to create a Treino
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Treino we want to update
     *   }
     * })
    **/
    upsert<T extends treinoUpsertArgs>(
      args: SelectSubset<T, treinoUpsertArgs>
    ): Prisma__treinoClient<treinoGetPayload<T>>

    /**
     * Count the number of Treinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {treinoCountArgs} args - Arguments to filter Treinos to count.
     * @example
     * // Count the number of Treinos
     * const count = await prisma.treino.count({
     *   where: {
     *     // ... the filter for the Treinos we want to count
     *   }
     * })
    **/
    count<T extends treinoCountArgs>(
      args?: Subset<T, treinoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreinoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Treino.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreinoAggregateArgs>(args: Subset<T, TreinoAggregateArgs>): Prisma.PrismaPromise<GetTreinoAggregateType<T>>

    /**
     * Group by Treino.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreinoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreinoGroupByArgs['orderBy'] }
        : { orderBy?: TreinoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreinoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreinoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for treino.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__treinoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    grupo<T extends treino$grupoArgs= {}>(args?: Subset<T, treino$grupoArgs>): Prisma.PrismaPromise<Array<grupoGetPayload<T>>| Null>;

    user<T extends userArgs= {}>(args?: Subset<T, userArgs>): Prisma__userClient<userGetPayload<T> | Null>;

    divisao<T extends divisaoArgs= {}>(args?: Subset<T, divisaoArgs>): Prisma__divisaoClient<divisaoGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * treino base type for findUnique actions
   */
  export type treinoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
    /**
     * Filter, which treino to fetch.
     */
    where: treinoWhereUniqueInput
  }

  /**
   * treino findUnique
   */
  export interface treinoFindUniqueArgs extends treinoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * treino findUniqueOrThrow
   */
  export type treinoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
    /**
     * Filter, which treino to fetch.
     */
    where: treinoWhereUniqueInput
  }


  /**
   * treino base type for findFirst actions
   */
  export type treinoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
    /**
     * Filter, which treino to fetch.
     */
    where?: treinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of treinos to fetch.
     */
    orderBy?: Enumerable<treinoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for treinos.
     */
    cursor?: treinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` treinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of treinos.
     */
    distinct?: Enumerable<TreinoScalarFieldEnum>
  }

  /**
   * treino findFirst
   */
  export interface treinoFindFirstArgs extends treinoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * treino findFirstOrThrow
   */
  export type treinoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
    /**
     * Filter, which treino to fetch.
     */
    where?: treinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of treinos to fetch.
     */
    orderBy?: Enumerable<treinoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for treinos.
     */
    cursor?: treinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` treinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of treinos.
     */
    distinct?: Enumerable<TreinoScalarFieldEnum>
  }


  /**
   * treino findMany
   */
  export type treinoFindManyArgs = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
    /**
     * Filter, which treinos to fetch.
     */
    where?: treinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of treinos to fetch.
     */
    orderBy?: Enumerable<treinoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing treinos.
     */
    cursor?: treinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` treinos.
     */
    skip?: number
    distinct?: Enumerable<TreinoScalarFieldEnum>
  }


  /**
   * treino create
   */
  export type treinoCreateArgs = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
    /**
     * The data needed to create a treino.
     */
    data: XOR<treinoCreateInput, treinoUncheckedCreateInput>
  }


  /**
   * treino createMany
   */
  export type treinoCreateManyArgs = {
    /**
     * The data used to create many treinos.
     */
    data: Enumerable<treinoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * treino update
   */
  export type treinoUpdateArgs = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
    /**
     * The data needed to update a treino.
     */
    data: XOR<treinoUpdateInput, treinoUncheckedUpdateInput>
    /**
     * Choose, which treino to update.
     */
    where: treinoWhereUniqueInput
  }


  /**
   * treino updateMany
   */
  export type treinoUpdateManyArgs = {
    /**
     * The data used to update treinos.
     */
    data: XOR<treinoUpdateManyMutationInput, treinoUncheckedUpdateManyInput>
    /**
     * Filter which treinos to update
     */
    where?: treinoWhereInput
  }


  /**
   * treino upsert
   */
  export type treinoUpsertArgs = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
    /**
     * The filter to search for the treino to update in case it exists.
     */
    where: treinoWhereUniqueInput
    /**
     * In case the treino found by the `where` argument doesn't exist, create a new treino with this data.
     */
    create: XOR<treinoCreateInput, treinoUncheckedCreateInput>
    /**
     * In case the treino was found with the provided `where` argument, update it with this data.
     */
    update: XOR<treinoUpdateInput, treinoUncheckedUpdateInput>
  }


  /**
   * treino delete
   */
  export type treinoDeleteArgs = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
    /**
     * Filter which treino to delete.
     */
    where: treinoWhereUniqueInput
  }


  /**
   * treino deleteMany
   */
  export type treinoDeleteManyArgs = {
    /**
     * Filter which treinos to delete
     */
    where?: treinoWhereInput
  }


  /**
   * treino.grupo
   */
  export type treino$grupoArgs = {
    /**
     * Select specific fields to fetch from the grupo
     */
    select?: grupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: grupoInclude | null
    where?: grupoWhereInput
    orderBy?: Enumerable<grupoOrderByWithRelationInput>
    cursor?: grupoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GrupoScalarFieldEnum>
  }


  /**
   * treino without action
   */
  export type treinoArgs = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    idade: number | null
    altura: number | null
    peso: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    idade: number | null
    altura: number | null
    peso: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    password: string | null
    idade: number | null
    altura: number | null
    peso: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    password: string | null
    idade: number | null
    altura: number | null
    peso: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    password: number
    idade: number
    altura: number
    peso: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    idade?: true
    altura?: true
    peso?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    idade?: true
    altura?: true
    peso?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
    idade?: true
    altura?: true
    peso?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
    idade?: true
    altura?: true
    peso?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
    idade?: true
    altura?: true
    peso?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    nome: string
    email: string
    password: string
    idade: number
    altura: number
    peso: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
    idade?: boolean
    altura?: boolean
    peso?: boolean
    treino?: boolean | user$treinoArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type userInclude = {
    treino?: boolean | user$treinoArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<S extends boolean | null | undefined | userArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? user :
    S extends undefined ? never :
    S extends { include: any } & (userArgs | userFindManyArgs)
    ? user  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'treino' ? Array < treinoGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (userArgs | userFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'treino' ? Array < treinoGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof user ? user[P] : never
  } 
      : user


  type userCountArgs = 
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? Prisma__userClient<userGetPayload<T>> : Prisma__userClient<userGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? Prisma__userClient<userGetPayload<T>> : Prisma__userClient<userGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): Prisma.PrismaPromise<Array<userGetPayload<T>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    treino<T extends user$treinoArgs= {}>(args?: Subset<T, user$treinoArgs>): Prisma.PrismaPromise<Array<treinoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user base type for findUnique actions
   */
  export type userFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUnique
   */
  export interface userFindUniqueArgs extends userFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user base type for findFirst actions
   */
  export type userFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * user findFirst
   */
  export interface userFindFirstArgs extends userFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     */
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user.treino
   */
  export type user$treinoArgs = {
    /**
     * Select specific fields to fetch from the treino
     */
    select?: treinoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: treinoInclude | null
    where?: treinoWhereInput
    orderBy?: Enumerable<treinoOrderByWithRelationInput>
    cursor?: treinoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TreinoScalarFieldEnum>
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const DivisaoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    descricao: 'descricao',
    days: 'days'
  };

  export type DivisaoScalarFieldEnum = (typeof DivisaoScalarFieldEnum)[keyof typeof DivisaoScalarFieldEnum]


  export const ExercicioScalarFieldEnum: {
    id: 'id',
    name: 'name',
    musculaturaId: 'musculaturaId',
    video: 'video'
  };

  export type ExercicioScalarFieldEnum = (typeof ExercicioScalarFieldEnum)[keyof typeof ExercicioScalarFieldEnum]


  export const GrupoScalarFieldEnum: {
    id: 'id',
    treinoId: 'treinoId',
    day: 'day',
    exercicio1: 'exercicio1',
    exercicio2: 'exercicio2',
    exercicio3: 'exercicio3',
    exercicio4: 'exercicio4',
    exercicio5: 'exercicio5',
    exercicio6: 'exercicio6',
    exercicio7: 'exercicio7'
  };

  export type GrupoScalarFieldEnum = (typeof GrupoScalarFieldEnum)[keyof typeof GrupoScalarFieldEnum]


  export const MusculaturaScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image'
  };

  export type MusculaturaScalarFieldEnum = (typeof MusculaturaScalarFieldEnum)[keyof typeof MusculaturaScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TreinoScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    divisaoId: 'divisaoId'
  };

  export type TreinoScalarFieldEnum = (typeof TreinoScalarFieldEnum)[keyof typeof TreinoScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    password: 'password',
    idade: 'idade',
    altura: 'altura',
    peso: 'peso'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type divisaoWhereInput = {
    AND?: Enumerable<divisaoWhereInput>
    OR?: Enumerable<divisaoWhereInput>
    NOT?: Enumerable<divisaoWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    descricao?: StringFilter | string
    days?: IntFilter | number
    treino?: TreinoListRelationFilter
  }

  export type divisaoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    descricao?: SortOrder
    days?: SortOrder
    treino?: treinoOrderByRelationAggregateInput
  }

  export type divisaoWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type divisaoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    descricao?: SortOrder
    days?: SortOrder
    _count?: divisaoCountOrderByAggregateInput
    _avg?: divisaoAvgOrderByAggregateInput
    _max?: divisaoMaxOrderByAggregateInput
    _min?: divisaoMinOrderByAggregateInput
    _sum?: divisaoSumOrderByAggregateInput
  }

  export type divisaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<divisaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<divisaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<divisaoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    descricao?: StringWithAggregatesFilter | string
    days?: IntWithAggregatesFilter | number
  }

  export type exercicioWhereInput = {
    AND?: Enumerable<exercicioWhereInput>
    OR?: Enumerable<exercicioWhereInput>
    NOT?: Enumerable<exercicioWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    musculaturaId?: IntFilter | number
    video?: StringFilter | string
    musculatura?: XOR<MusculaturaRelationFilter, musculaturaWhereInput>
    grupo_grupo_exercicio1Toexercicio?: GrupoListRelationFilter
    grupo_grupo_exercicio2Toexercicio?: GrupoListRelationFilter
    grupo_grupo_exercicio3Toexercicio?: GrupoListRelationFilter
    grupo_grupo_exercicio4Toexercicio?: GrupoListRelationFilter
    grupo_grupo_exercicio5Toexercicio?: GrupoListRelationFilter
    grupo_grupo_exercicio6Toexercicio?: GrupoListRelationFilter
    grupo_grupo_exercicio7Toexercicio?: GrupoListRelationFilter
  }

  export type exercicioOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    musculaturaId?: SortOrder
    video?: SortOrder
    musculatura?: musculaturaOrderByWithRelationInput
    grupo_grupo_exercicio1Toexercicio?: grupoOrderByRelationAggregateInput
    grupo_grupo_exercicio2Toexercicio?: grupoOrderByRelationAggregateInput
    grupo_grupo_exercicio3Toexercicio?: grupoOrderByRelationAggregateInput
    grupo_grupo_exercicio4Toexercicio?: grupoOrderByRelationAggregateInput
    grupo_grupo_exercicio5Toexercicio?: grupoOrderByRelationAggregateInput
    grupo_grupo_exercicio6Toexercicio?: grupoOrderByRelationAggregateInput
    grupo_grupo_exercicio7Toexercicio?: grupoOrderByRelationAggregateInput
  }

  export type exercicioWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type exercicioOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    musculaturaId?: SortOrder
    video?: SortOrder
    _count?: exercicioCountOrderByAggregateInput
    _avg?: exercicioAvgOrderByAggregateInput
    _max?: exercicioMaxOrderByAggregateInput
    _min?: exercicioMinOrderByAggregateInput
    _sum?: exercicioSumOrderByAggregateInput
  }

  export type exercicioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<exercicioScalarWhereWithAggregatesInput>
    OR?: Enumerable<exercicioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<exercicioScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    musculaturaId?: IntWithAggregatesFilter | number
    video?: StringWithAggregatesFilter | string
  }

  export type grupoWhereInput = {
    AND?: Enumerable<grupoWhereInput>
    OR?: Enumerable<grupoWhereInput>
    NOT?: Enumerable<grupoWhereInput>
    id?: IntFilter | number
    treinoId?: IntFilter | number
    day?: EnumdaysNullableFilter | days | null
    exercicio1?: IntFilter | number
    exercicio2?: IntFilter | number
    exercicio3?: IntFilter | number
    exercicio4?: IntFilter | number
    exercicio5?: IntNullableFilter | number | null
    exercicio6?: IntNullableFilter | number | null
    exercicio7?: IntNullableFilter | number | null
    treino?: XOR<TreinoRelationFilter, treinoWhereInput>
    exercicio_grupo_exercicio1Toexercicio?: XOR<ExercicioRelationFilter, exercicioWhereInput>
    exercicio_grupo_exercicio2Toexercicio?: XOR<ExercicioRelationFilter, exercicioWhereInput>
    exercicio_grupo_exercicio3Toexercicio?: XOR<ExercicioRelationFilter, exercicioWhereInput>
    exercicio_grupo_exercicio4Toexercicio?: XOR<ExercicioRelationFilter, exercicioWhereInput>
    exercicio_grupo_exercicio5Toexercicio?: XOR<ExercicioRelationFilter, exercicioWhereInput> | null
    exercicio_grupo_exercicio6Toexercicio?: XOR<ExercicioRelationFilter, exercicioWhereInput> | null
    exercicio_grupo_exercicio7Toexercicio?: XOR<ExercicioRelationFilter, exercicioWhereInput> | null
  }

  export type grupoOrderByWithRelationInput = {
    id?: SortOrder
    treinoId?: SortOrder
    day?: SortOrder
    exercicio1?: SortOrder
    exercicio2?: SortOrder
    exercicio3?: SortOrder
    exercicio4?: SortOrder
    exercicio5?: SortOrder
    exercicio6?: SortOrder
    exercicio7?: SortOrder
    treino?: treinoOrderByWithRelationInput
    exercicio_grupo_exercicio1Toexercicio?: exercicioOrderByWithRelationInput
    exercicio_grupo_exercicio2Toexercicio?: exercicioOrderByWithRelationInput
    exercicio_grupo_exercicio3Toexercicio?: exercicioOrderByWithRelationInput
    exercicio_grupo_exercicio4Toexercicio?: exercicioOrderByWithRelationInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioOrderByWithRelationInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioOrderByWithRelationInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioOrderByWithRelationInput
  }

  export type grupoWhereUniqueInput = {
    id?: number
  }

  export type grupoOrderByWithAggregationInput = {
    id?: SortOrder
    treinoId?: SortOrder
    day?: SortOrder
    exercicio1?: SortOrder
    exercicio2?: SortOrder
    exercicio3?: SortOrder
    exercicio4?: SortOrder
    exercicio5?: SortOrder
    exercicio6?: SortOrder
    exercicio7?: SortOrder
    _count?: grupoCountOrderByAggregateInput
    _avg?: grupoAvgOrderByAggregateInput
    _max?: grupoMaxOrderByAggregateInput
    _min?: grupoMinOrderByAggregateInput
    _sum?: grupoSumOrderByAggregateInput
  }

  export type grupoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<grupoScalarWhereWithAggregatesInput>
    OR?: Enumerable<grupoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<grupoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    treinoId?: IntWithAggregatesFilter | number
    day?: EnumdaysNullableWithAggregatesFilter | days | null
    exercicio1?: IntWithAggregatesFilter | number
    exercicio2?: IntWithAggregatesFilter | number
    exercicio3?: IntWithAggregatesFilter | number
    exercicio4?: IntWithAggregatesFilter | number
    exercicio5?: IntNullableWithAggregatesFilter | number | null
    exercicio6?: IntNullableWithAggregatesFilter | number | null
    exercicio7?: IntNullableWithAggregatesFilter | number | null
  }

  export type musculaturaWhereInput = {
    AND?: Enumerable<musculaturaWhereInput>
    OR?: Enumerable<musculaturaWhereInput>
    NOT?: Enumerable<musculaturaWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    image?: StringFilter | string
    exercicio?: ExercicioListRelationFilter
  }

  export type musculaturaOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    exercicio?: exercicioOrderByRelationAggregateInput
  }

  export type musculaturaWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type musculaturaOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    _count?: musculaturaCountOrderByAggregateInput
    _avg?: musculaturaAvgOrderByAggregateInput
    _max?: musculaturaMaxOrderByAggregateInput
    _min?: musculaturaMinOrderByAggregateInput
    _sum?: musculaturaSumOrderByAggregateInput
  }

  export type musculaturaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<musculaturaScalarWhereWithAggregatesInput>
    OR?: Enumerable<musculaturaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<musculaturaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
  }

  export type treinoWhereInput = {
    AND?: Enumerable<treinoWhereInput>
    OR?: Enumerable<treinoWhereInput>
    NOT?: Enumerable<treinoWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    divisaoId?: IntFilter | number
    grupo?: GrupoListRelationFilter
    user?: XOR<UserRelationFilter, userWhereInput>
    divisao?: XOR<DivisaoRelationFilter, divisaoWhereInput>
  }

  export type treinoOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    divisaoId?: SortOrder
    grupo?: grupoOrderByRelationAggregateInput
    user?: userOrderByWithRelationInput
    divisao?: divisaoOrderByWithRelationInput
  }

  export type treinoWhereUniqueInput = {
    id?: number
  }

  export type treinoOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    divisaoId?: SortOrder
    _count?: treinoCountOrderByAggregateInput
    _avg?: treinoAvgOrderByAggregateInput
    _max?: treinoMaxOrderByAggregateInput
    _min?: treinoMinOrderByAggregateInput
    _sum?: treinoSumOrderByAggregateInput
  }

  export type treinoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<treinoScalarWhereWithAggregatesInput>
    OR?: Enumerable<treinoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<treinoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    divisaoId?: IntWithAggregatesFilter | number
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    idade?: IntFilter | number
    altura?: IntFilter | number
    peso?: IntFilter | number
    treino?: TreinoListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
    treino?: treinoOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    idade?: IntWithAggregatesFilter | number
    altura?: IntWithAggregatesFilter | number
    peso?: IntWithAggregatesFilter | number
  }

  export type divisaoCreateInput = {
    name: string
    descricao: string
    days: number
    treino?: treinoCreateNestedManyWithoutDivisaoInput
  }

  export type divisaoUncheckedCreateInput = {
    id?: number
    name: string
    descricao: string
    days: number
    treino?: treinoUncheckedCreateNestedManyWithoutDivisaoInput
  }

  export type divisaoUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    treino?: treinoUpdateManyWithoutDivisaoNestedInput
  }

  export type divisaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    treino?: treinoUncheckedUpdateManyWithoutDivisaoNestedInput
  }

  export type divisaoCreateManyInput = {
    id?: number
    name: string
    descricao: string
    days: number
  }

  export type divisaoUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
  }

  export type divisaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
  }

  export type exercicioCreateInput = {
    name: string
    video: string
    musculatura: musculaturaCreateNestedOneWithoutExercicioInput
    grupo_grupo_exercicio1Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioUncheckedCreateInput = {
    id?: number
    name: string
    musculaturaId: number
    video: string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
    musculatura?: musculaturaUpdateOneRequiredWithoutExercicioNestedInput
    grupo_grupo_exercicio1Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    musculaturaId?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioCreateManyInput = {
    id?: number
    name: string
    musculaturaId: number
    video: string
  }

  export type exercicioUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
  }

  export type exercicioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    musculaturaId?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
  }

  export type grupoCreateInput = {
    day?: days | null
    treino: treinoCreateNestedOneWithoutGrupoInput
    exercicio_grupo_exercicio1Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio1ToexercicioInput
    exercicio_grupo_exercicio2Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio2ToexercicioInput
    exercicio_grupo_exercicio3Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio3ToexercicioInput
    exercicio_grupo_exercicio4Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio4ToexercicioInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio5ToexercicioInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio6ToexercicioInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio7ToexercicioInput
  }

  export type grupoUncheckedCreateInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoUpdateInput = {
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    treino?: treinoUpdateOneRequiredWithoutGrupoNestedInput
    exercicio_grupo_exercicio1Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio1ToexercicioNestedInput
    exercicio_grupo_exercicio2Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio2ToexercicioNestedInput
    exercicio_grupo_exercicio3Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio3ToexercicioNestedInput
    exercicio_grupo_exercicio4Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio4ToexercicioNestedInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio5ToexercicioNestedInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio6ToexercicioNestedInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio7ToexercicioNestedInput
  }

  export type grupoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoCreateManyInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoUpdateManyMutationInput = {
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
  }

  export type grupoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type musculaturaCreateInput = {
    name: string
    image: string
    exercicio?: exercicioCreateNestedManyWithoutMusculaturaInput
  }

  export type musculaturaUncheckedCreateInput = {
    id?: number
    name: string
    image: string
    exercicio?: exercicioUncheckedCreateNestedManyWithoutMusculaturaInput
  }

  export type musculaturaUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    exercicio?: exercicioUpdateManyWithoutMusculaturaNestedInput
  }

  export type musculaturaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    exercicio?: exercicioUncheckedUpdateManyWithoutMusculaturaNestedInput
  }

  export type musculaturaCreateManyInput = {
    id?: number
    name: string
    image: string
  }

  export type musculaturaUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type musculaturaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type treinoCreateInput = {
    grupo?: grupoCreateNestedManyWithoutTreinoInput
    user: userCreateNestedOneWithoutTreinoInput
    divisao: divisaoCreateNestedOneWithoutTreinoInput
  }

  export type treinoUncheckedCreateInput = {
    id?: number
    userId: number
    divisaoId: number
    grupo?: grupoUncheckedCreateNestedManyWithoutTreinoInput
  }

  export type treinoUpdateInput = {
    grupo?: grupoUpdateManyWithoutTreinoNestedInput
    user?: userUpdateOneRequiredWithoutTreinoNestedInput
    divisao?: divisaoUpdateOneRequiredWithoutTreinoNestedInput
  }

  export type treinoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    divisaoId?: IntFieldUpdateOperationsInput | number
    grupo?: grupoUncheckedUpdateManyWithoutTreinoNestedInput
  }

  export type treinoCreateManyInput = {
    id?: number
    userId: number
    divisaoId: number
  }

  export type treinoUpdateManyMutationInput = {

  }

  export type treinoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    divisaoId?: IntFieldUpdateOperationsInput | number
  }

  export type userCreateInput = {
    nome: string
    email: string
    password: string
    idade: number
    altura: number
    peso: number
    treino?: treinoCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    password: string
    idade: number
    altura: number
    peso: number
    treino?: treinoUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: IntFieldUpdateOperationsInput | number
    peso?: IntFieldUpdateOperationsInput | number
    treino?: treinoUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: IntFieldUpdateOperationsInput | number
    peso?: IntFieldUpdateOperationsInput | number
    treino?: treinoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    nome: string
    email: string
    password: string
    idade: number
    altura: number
    peso: number
  }

  export type userUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: IntFieldUpdateOperationsInput | number
    peso?: IntFieldUpdateOperationsInput | number
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: IntFieldUpdateOperationsInput | number
    peso?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type TreinoListRelationFilter = {
    every?: treinoWhereInput
    some?: treinoWhereInput
    none?: treinoWhereInput
  }

  export type treinoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type divisaoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    descricao?: SortOrder
    days?: SortOrder
  }

  export type divisaoAvgOrderByAggregateInput = {
    id?: SortOrder
    days?: SortOrder
  }

  export type divisaoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    descricao?: SortOrder
    days?: SortOrder
  }

  export type divisaoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    descricao?: SortOrder
    days?: SortOrder
  }

  export type divisaoSumOrderByAggregateInput = {
    id?: SortOrder
    days?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type MusculaturaRelationFilter = {
    is?: musculaturaWhereInput
    isNot?: musculaturaWhereInput
  }

  export type GrupoListRelationFilter = {
    every?: grupoWhereInput
    some?: grupoWhereInput
    none?: grupoWhereInput
  }

  export type grupoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type exercicioCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    musculaturaId?: SortOrder
    video?: SortOrder
  }

  export type exercicioAvgOrderByAggregateInput = {
    id?: SortOrder
    musculaturaId?: SortOrder
  }

  export type exercicioMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    musculaturaId?: SortOrder
    video?: SortOrder
  }

  export type exercicioMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    musculaturaId?: SortOrder
    video?: SortOrder
  }

  export type exercicioSumOrderByAggregateInput = {
    id?: SortOrder
    musculaturaId?: SortOrder
  }

  export type EnumdaysNullableFilter = {
    equals?: days | null
    in?: Enumerable<days> | null
    notIn?: Enumerable<days> | null
    not?: NestedEnumdaysNullableFilter | days | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type TreinoRelationFilter = {
    is?: treinoWhereInput
    isNot?: treinoWhereInput
  }

  export type ExercicioRelationFilter = {
    is?: exercicioWhereInput
    isNot?: exercicioWhereInput
  }

  export type grupoCountOrderByAggregateInput = {
    id?: SortOrder
    treinoId?: SortOrder
    day?: SortOrder
    exercicio1?: SortOrder
    exercicio2?: SortOrder
    exercicio3?: SortOrder
    exercicio4?: SortOrder
    exercicio5?: SortOrder
    exercicio6?: SortOrder
    exercicio7?: SortOrder
  }

  export type grupoAvgOrderByAggregateInput = {
    id?: SortOrder
    treinoId?: SortOrder
    exercicio1?: SortOrder
    exercicio2?: SortOrder
    exercicio3?: SortOrder
    exercicio4?: SortOrder
    exercicio5?: SortOrder
    exercicio6?: SortOrder
    exercicio7?: SortOrder
  }

  export type grupoMaxOrderByAggregateInput = {
    id?: SortOrder
    treinoId?: SortOrder
    day?: SortOrder
    exercicio1?: SortOrder
    exercicio2?: SortOrder
    exercicio3?: SortOrder
    exercicio4?: SortOrder
    exercicio5?: SortOrder
    exercicio6?: SortOrder
    exercicio7?: SortOrder
  }

  export type grupoMinOrderByAggregateInput = {
    id?: SortOrder
    treinoId?: SortOrder
    day?: SortOrder
    exercicio1?: SortOrder
    exercicio2?: SortOrder
    exercicio3?: SortOrder
    exercicio4?: SortOrder
    exercicio5?: SortOrder
    exercicio6?: SortOrder
    exercicio7?: SortOrder
  }

  export type grupoSumOrderByAggregateInput = {
    id?: SortOrder
    treinoId?: SortOrder
    exercicio1?: SortOrder
    exercicio2?: SortOrder
    exercicio3?: SortOrder
    exercicio4?: SortOrder
    exercicio5?: SortOrder
    exercicio6?: SortOrder
    exercicio7?: SortOrder
  }

  export type EnumdaysNullableWithAggregatesFilter = {
    equals?: days | null
    in?: Enumerable<days> | null
    notIn?: Enumerable<days> | null
    not?: NestedEnumdaysNullableWithAggregatesFilter | days | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumdaysNullableFilter
    _max?: NestedEnumdaysNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type ExercicioListRelationFilter = {
    every?: exercicioWhereInput
    some?: exercicioWhereInput
    none?: exercicioWhereInput
  }

  export type exercicioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type musculaturaCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type musculaturaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type musculaturaMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type musculaturaMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type musculaturaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type DivisaoRelationFilter = {
    is?: divisaoWhereInput
    isNot?: divisaoWhereInput
  }

  export type treinoCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    divisaoId?: SortOrder
  }

  export type treinoAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    divisaoId?: SortOrder
  }

  export type treinoMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    divisaoId?: SortOrder
  }

  export type treinoMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    divisaoId?: SortOrder
  }

  export type treinoSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    divisaoId?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
  }

  export type treinoCreateNestedManyWithoutDivisaoInput = {
    create?: XOR<Enumerable<treinoCreateWithoutDivisaoInput>, Enumerable<treinoUncheckedCreateWithoutDivisaoInput>>
    connectOrCreate?: Enumerable<treinoCreateOrConnectWithoutDivisaoInput>
    createMany?: treinoCreateManyDivisaoInputEnvelope
    connect?: Enumerable<treinoWhereUniqueInput>
  }

  export type treinoUncheckedCreateNestedManyWithoutDivisaoInput = {
    create?: XOR<Enumerable<treinoCreateWithoutDivisaoInput>, Enumerable<treinoUncheckedCreateWithoutDivisaoInput>>
    connectOrCreate?: Enumerable<treinoCreateOrConnectWithoutDivisaoInput>
    createMany?: treinoCreateManyDivisaoInputEnvelope
    connect?: Enumerable<treinoWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type treinoUpdateManyWithoutDivisaoNestedInput = {
    create?: XOR<Enumerable<treinoCreateWithoutDivisaoInput>, Enumerable<treinoUncheckedCreateWithoutDivisaoInput>>
    connectOrCreate?: Enumerable<treinoCreateOrConnectWithoutDivisaoInput>
    upsert?: Enumerable<treinoUpsertWithWhereUniqueWithoutDivisaoInput>
    createMany?: treinoCreateManyDivisaoInputEnvelope
    set?: Enumerable<treinoWhereUniqueInput>
    disconnect?: Enumerable<treinoWhereUniqueInput>
    delete?: Enumerable<treinoWhereUniqueInput>
    connect?: Enumerable<treinoWhereUniqueInput>
    update?: Enumerable<treinoUpdateWithWhereUniqueWithoutDivisaoInput>
    updateMany?: Enumerable<treinoUpdateManyWithWhereWithoutDivisaoInput>
    deleteMany?: Enumerable<treinoScalarWhereInput>
  }

  export type treinoUncheckedUpdateManyWithoutDivisaoNestedInput = {
    create?: XOR<Enumerable<treinoCreateWithoutDivisaoInput>, Enumerable<treinoUncheckedCreateWithoutDivisaoInput>>
    connectOrCreate?: Enumerable<treinoCreateOrConnectWithoutDivisaoInput>
    upsert?: Enumerable<treinoUpsertWithWhereUniqueWithoutDivisaoInput>
    createMany?: treinoCreateManyDivisaoInputEnvelope
    set?: Enumerable<treinoWhereUniqueInput>
    disconnect?: Enumerable<treinoWhereUniqueInput>
    delete?: Enumerable<treinoWhereUniqueInput>
    connect?: Enumerable<treinoWhereUniqueInput>
    update?: Enumerable<treinoUpdateWithWhereUniqueWithoutDivisaoInput>
    updateMany?: Enumerable<treinoUpdateManyWithWhereWithoutDivisaoInput>
    deleteMany?: Enumerable<treinoScalarWhereInput>
  }

  export type musculaturaCreateNestedOneWithoutExercicioInput = {
    create?: XOR<musculaturaCreateWithoutExercicioInput, musculaturaUncheckedCreateWithoutExercicioInput>
    connectOrCreate?: musculaturaCreateOrConnectWithoutExercicioInput
    connect?: musculaturaWhereUniqueInput
  }

  export type grupoCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio1ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio1ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio1ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio1ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio2ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio2ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio2ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio2ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio3ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio3ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio3ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio3ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio4ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio4ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio4ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio4ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio5ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio5ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio5ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio5ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio6ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio6ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio6ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio6ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio7ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio7ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio7ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio7ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio1ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio1ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio1ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio1ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio2ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio2ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio2ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio2ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio3ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio3ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio3ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio3ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio4ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio4ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio4ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio4ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio5ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio5ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio5ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio5ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio6ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio6ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio6ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio6ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio7ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio7ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio7ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio7ToexercicioInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type musculaturaUpdateOneRequiredWithoutExercicioNestedInput = {
    create?: XOR<musculaturaCreateWithoutExercicioInput, musculaturaUncheckedCreateWithoutExercicioInput>
    connectOrCreate?: musculaturaCreateOrConnectWithoutExercicioInput
    upsert?: musculaturaUpsertWithoutExercicioInput
    connect?: musculaturaWhereUniqueInput
    update?: XOR<musculaturaUpdateWithoutExercicioInput, musculaturaUncheckedUpdateWithoutExercicioInput>
  }

  export type grupoUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio1ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio1ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio1ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio1ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio1ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio1ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio1ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio2ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio2ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio2ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio2ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio2ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio2ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio2ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio3ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio3ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio3ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio3ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio3ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio3ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio3ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio4ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio4ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio4ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio4ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio4ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio4ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio4ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio5ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio5ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio5ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio5ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio5ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio5ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio5ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio6ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio6ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio6ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio6ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio6ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio6ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio6ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio7ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio7ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio7ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio7ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio7ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio7ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio7ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio1ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio1ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio1ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio1ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio1ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio1ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio1ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio2ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio2ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio2ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio2ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio2ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio2ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio2ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio3ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio3ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio3ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio3ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio3ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio3ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio3ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio4ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio4ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio4ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio4ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio4ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio4ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio4ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio5ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio5ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio5ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio5ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio5ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio5ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio5ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio6ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio6ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio6ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio6ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio6ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio6ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio6ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutExercicio_grupo_exercicio7ToexercicioInput>, Enumerable<grupoUncheckedCreateWithoutExercicio_grupo_exercicio7ToexercicioInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutExercicio_grupo_exercicio7ToexercicioInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio7ToexercicioInput>
    createMany?: grupoCreateManyExercicio_grupo_exercicio7ToexercicioInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio7ToexercicioInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio7ToexercicioInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type treinoCreateNestedOneWithoutGrupoInput = {
    create?: XOR<treinoCreateWithoutGrupoInput, treinoUncheckedCreateWithoutGrupoInput>
    connectOrCreate?: treinoCreateOrConnectWithoutGrupoInput
    connect?: treinoWhereUniqueInput
  }

  export type exercicioCreateNestedOneWithoutGrupo_grupo_exercicio1ToexercicioInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio1ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio1ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio1ToexercicioInput
    connect?: exercicioWhereUniqueInput
  }

  export type exercicioCreateNestedOneWithoutGrupo_grupo_exercicio2ToexercicioInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio2ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio2ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio2ToexercicioInput
    connect?: exercicioWhereUniqueInput
  }

  export type exercicioCreateNestedOneWithoutGrupo_grupo_exercicio3ToexercicioInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio3ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio3ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio3ToexercicioInput
    connect?: exercicioWhereUniqueInput
  }

  export type exercicioCreateNestedOneWithoutGrupo_grupo_exercicio4ToexercicioInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio4ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio4ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio4ToexercicioInput
    connect?: exercicioWhereUniqueInput
  }

  export type exercicioCreateNestedOneWithoutGrupo_grupo_exercicio5ToexercicioInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio5ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio5ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio5ToexercicioInput
    connect?: exercicioWhereUniqueInput
  }

  export type exercicioCreateNestedOneWithoutGrupo_grupo_exercicio6ToexercicioInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio6ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio6ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio6ToexercicioInput
    connect?: exercicioWhereUniqueInput
  }

  export type exercicioCreateNestedOneWithoutGrupo_grupo_exercicio7ToexercicioInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio7ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio7ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio7ToexercicioInput
    connect?: exercicioWhereUniqueInput
  }

  export type NullableEnumdaysFieldUpdateOperationsInput = {
    set?: days | null
  }

  export type treinoUpdateOneRequiredWithoutGrupoNestedInput = {
    create?: XOR<treinoCreateWithoutGrupoInput, treinoUncheckedCreateWithoutGrupoInput>
    connectOrCreate?: treinoCreateOrConnectWithoutGrupoInput
    upsert?: treinoUpsertWithoutGrupoInput
    connect?: treinoWhereUniqueInput
    update?: XOR<treinoUpdateWithoutGrupoInput, treinoUncheckedUpdateWithoutGrupoInput>
  }

  export type exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio1ToexercicioNestedInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio1ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio1ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio1ToexercicioInput
    upsert?: exercicioUpsertWithoutGrupo_grupo_exercicio1ToexercicioInput
    connect?: exercicioWhereUniqueInput
    update?: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio1ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio1ToexercicioInput>
  }

  export type exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio2ToexercicioNestedInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio2ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio2ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio2ToexercicioInput
    upsert?: exercicioUpsertWithoutGrupo_grupo_exercicio2ToexercicioInput
    connect?: exercicioWhereUniqueInput
    update?: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio2ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio2ToexercicioInput>
  }

  export type exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio3ToexercicioNestedInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio3ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio3ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio3ToexercicioInput
    upsert?: exercicioUpsertWithoutGrupo_grupo_exercicio3ToexercicioInput
    connect?: exercicioWhereUniqueInput
    update?: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio3ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio3ToexercicioInput>
  }

  export type exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio4ToexercicioNestedInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio4ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio4ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio4ToexercicioInput
    upsert?: exercicioUpsertWithoutGrupo_grupo_exercicio4ToexercicioInput
    connect?: exercicioWhereUniqueInput
    update?: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio4ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio4ToexercicioInput>
  }

  export type exercicioUpdateOneWithoutGrupo_grupo_exercicio5ToexercicioNestedInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio5ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio5ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio5ToexercicioInput
    upsert?: exercicioUpsertWithoutGrupo_grupo_exercicio5ToexercicioInput
    disconnect?: boolean
    delete?: boolean
    connect?: exercicioWhereUniqueInput
    update?: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio5ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio5ToexercicioInput>
  }

  export type exercicioUpdateOneWithoutGrupo_grupo_exercicio6ToexercicioNestedInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio6ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio6ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio6ToexercicioInput
    upsert?: exercicioUpsertWithoutGrupo_grupo_exercicio6ToexercicioInput
    disconnect?: boolean
    delete?: boolean
    connect?: exercicioWhereUniqueInput
    update?: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio6ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio6ToexercicioInput>
  }

  export type exercicioUpdateOneWithoutGrupo_grupo_exercicio7ToexercicioNestedInput = {
    create?: XOR<exercicioCreateWithoutGrupo_grupo_exercicio7ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio7ToexercicioInput>
    connectOrCreate?: exercicioCreateOrConnectWithoutGrupo_grupo_exercicio7ToexercicioInput
    upsert?: exercicioUpsertWithoutGrupo_grupo_exercicio7ToexercicioInput
    disconnect?: boolean
    delete?: boolean
    connect?: exercicioWhereUniqueInput
    update?: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio7ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio7ToexercicioInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type exercicioCreateNestedManyWithoutMusculaturaInput = {
    create?: XOR<Enumerable<exercicioCreateWithoutMusculaturaInput>, Enumerable<exercicioUncheckedCreateWithoutMusculaturaInput>>
    connectOrCreate?: Enumerable<exercicioCreateOrConnectWithoutMusculaturaInput>
    createMany?: exercicioCreateManyMusculaturaInputEnvelope
    connect?: Enumerable<exercicioWhereUniqueInput>
  }

  export type exercicioUncheckedCreateNestedManyWithoutMusculaturaInput = {
    create?: XOR<Enumerable<exercicioCreateWithoutMusculaturaInput>, Enumerable<exercicioUncheckedCreateWithoutMusculaturaInput>>
    connectOrCreate?: Enumerable<exercicioCreateOrConnectWithoutMusculaturaInput>
    createMany?: exercicioCreateManyMusculaturaInputEnvelope
    connect?: Enumerable<exercicioWhereUniqueInput>
  }

  export type exercicioUpdateManyWithoutMusculaturaNestedInput = {
    create?: XOR<Enumerable<exercicioCreateWithoutMusculaturaInput>, Enumerable<exercicioUncheckedCreateWithoutMusculaturaInput>>
    connectOrCreate?: Enumerable<exercicioCreateOrConnectWithoutMusculaturaInput>
    upsert?: Enumerable<exercicioUpsertWithWhereUniqueWithoutMusculaturaInput>
    createMany?: exercicioCreateManyMusculaturaInputEnvelope
    set?: Enumerable<exercicioWhereUniqueInput>
    disconnect?: Enumerable<exercicioWhereUniqueInput>
    delete?: Enumerable<exercicioWhereUniqueInput>
    connect?: Enumerable<exercicioWhereUniqueInput>
    update?: Enumerable<exercicioUpdateWithWhereUniqueWithoutMusculaturaInput>
    updateMany?: Enumerable<exercicioUpdateManyWithWhereWithoutMusculaturaInput>
    deleteMany?: Enumerable<exercicioScalarWhereInput>
  }

  export type exercicioUncheckedUpdateManyWithoutMusculaturaNestedInput = {
    create?: XOR<Enumerable<exercicioCreateWithoutMusculaturaInput>, Enumerable<exercicioUncheckedCreateWithoutMusculaturaInput>>
    connectOrCreate?: Enumerable<exercicioCreateOrConnectWithoutMusculaturaInput>
    upsert?: Enumerable<exercicioUpsertWithWhereUniqueWithoutMusculaturaInput>
    createMany?: exercicioCreateManyMusculaturaInputEnvelope
    set?: Enumerable<exercicioWhereUniqueInput>
    disconnect?: Enumerable<exercicioWhereUniqueInput>
    delete?: Enumerable<exercicioWhereUniqueInput>
    connect?: Enumerable<exercicioWhereUniqueInput>
    update?: Enumerable<exercicioUpdateWithWhereUniqueWithoutMusculaturaInput>
    updateMany?: Enumerable<exercicioUpdateManyWithWhereWithoutMusculaturaInput>
    deleteMany?: Enumerable<exercicioScalarWhereInput>
  }

  export type grupoCreateNestedManyWithoutTreinoInput = {
    create?: XOR<Enumerable<grupoCreateWithoutTreinoInput>, Enumerable<grupoUncheckedCreateWithoutTreinoInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutTreinoInput>
    createMany?: grupoCreateManyTreinoInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type userCreateNestedOneWithoutTreinoInput = {
    create?: XOR<userCreateWithoutTreinoInput, userUncheckedCreateWithoutTreinoInput>
    connectOrCreate?: userCreateOrConnectWithoutTreinoInput
    connect?: userWhereUniqueInput
  }

  export type divisaoCreateNestedOneWithoutTreinoInput = {
    create?: XOR<divisaoCreateWithoutTreinoInput, divisaoUncheckedCreateWithoutTreinoInput>
    connectOrCreate?: divisaoCreateOrConnectWithoutTreinoInput
    connect?: divisaoWhereUniqueInput
  }

  export type grupoUncheckedCreateNestedManyWithoutTreinoInput = {
    create?: XOR<Enumerable<grupoCreateWithoutTreinoInput>, Enumerable<grupoUncheckedCreateWithoutTreinoInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutTreinoInput>
    createMany?: grupoCreateManyTreinoInputEnvelope
    connect?: Enumerable<grupoWhereUniqueInput>
  }

  export type grupoUpdateManyWithoutTreinoNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutTreinoInput>, Enumerable<grupoUncheckedCreateWithoutTreinoInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutTreinoInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutTreinoInput>
    createMany?: grupoCreateManyTreinoInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutTreinoInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutTreinoInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type userUpdateOneRequiredWithoutTreinoNestedInput = {
    create?: XOR<userCreateWithoutTreinoInput, userUncheckedCreateWithoutTreinoInput>
    connectOrCreate?: userCreateOrConnectWithoutTreinoInput
    upsert?: userUpsertWithoutTreinoInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutTreinoInput, userUncheckedUpdateWithoutTreinoInput>
  }

  export type divisaoUpdateOneRequiredWithoutTreinoNestedInput = {
    create?: XOR<divisaoCreateWithoutTreinoInput, divisaoUncheckedCreateWithoutTreinoInput>
    connectOrCreate?: divisaoCreateOrConnectWithoutTreinoInput
    upsert?: divisaoUpsertWithoutTreinoInput
    connect?: divisaoWhereUniqueInput
    update?: XOR<divisaoUpdateWithoutTreinoInput, divisaoUncheckedUpdateWithoutTreinoInput>
  }

  export type grupoUncheckedUpdateManyWithoutTreinoNestedInput = {
    create?: XOR<Enumerable<grupoCreateWithoutTreinoInput>, Enumerable<grupoUncheckedCreateWithoutTreinoInput>>
    connectOrCreate?: Enumerable<grupoCreateOrConnectWithoutTreinoInput>
    upsert?: Enumerable<grupoUpsertWithWhereUniqueWithoutTreinoInput>
    createMany?: grupoCreateManyTreinoInputEnvelope
    set?: Enumerable<grupoWhereUniqueInput>
    disconnect?: Enumerable<grupoWhereUniqueInput>
    delete?: Enumerable<grupoWhereUniqueInput>
    connect?: Enumerable<grupoWhereUniqueInput>
    update?: Enumerable<grupoUpdateWithWhereUniqueWithoutTreinoInput>
    updateMany?: Enumerable<grupoUpdateManyWithWhereWithoutTreinoInput>
    deleteMany?: Enumerable<grupoScalarWhereInput>
  }

  export type treinoCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<treinoCreateWithoutUserInput>, Enumerable<treinoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<treinoCreateOrConnectWithoutUserInput>
    createMany?: treinoCreateManyUserInputEnvelope
    connect?: Enumerable<treinoWhereUniqueInput>
  }

  export type treinoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<treinoCreateWithoutUserInput>, Enumerable<treinoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<treinoCreateOrConnectWithoutUserInput>
    createMany?: treinoCreateManyUserInputEnvelope
    connect?: Enumerable<treinoWhereUniqueInput>
  }

  export type treinoUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<treinoCreateWithoutUserInput>, Enumerable<treinoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<treinoCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<treinoUpsertWithWhereUniqueWithoutUserInput>
    createMany?: treinoCreateManyUserInputEnvelope
    set?: Enumerable<treinoWhereUniqueInput>
    disconnect?: Enumerable<treinoWhereUniqueInput>
    delete?: Enumerable<treinoWhereUniqueInput>
    connect?: Enumerable<treinoWhereUniqueInput>
    update?: Enumerable<treinoUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<treinoUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<treinoScalarWhereInput>
  }

  export type treinoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<treinoCreateWithoutUserInput>, Enumerable<treinoUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<treinoCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<treinoUpsertWithWhereUniqueWithoutUserInput>
    createMany?: treinoCreateManyUserInputEnvelope
    set?: Enumerable<treinoWhereUniqueInput>
    disconnect?: Enumerable<treinoWhereUniqueInput>
    delete?: Enumerable<treinoWhereUniqueInput>
    connect?: Enumerable<treinoWhereUniqueInput>
    update?: Enumerable<treinoUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<treinoUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<treinoScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedEnumdaysNullableFilter = {
    equals?: days | null
    in?: Enumerable<days> | null
    notIn?: Enumerable<days> | null
    not?: NestedEnumdaysNullableFilter | days | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumdaysNullableWithAggregatesFilter = {
    equals?: days | null
    in?: Enumerable<days> | null
    notIn?: Enumerable<days> | null
    not?: NestedEnumdaysNullableWithAggregatesFilter | days | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumdaysNullableFilter
    _max?: NestedEnumdaysNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type treinoCreateWithoutDivisaoInput = {
    grupo?: grupoCreateNestedManyWithoutTreinoInput
    user: userCreateNestedOneWithoutTreinoInput
  }

  export type treinoUncheckedCreateWithoutDivisaoInput = {
    id?: number
    userId: number
    grupo?: grupoUncheckedCreateNestedManyWithoutTreinoInput
  }

  export type treinoCreateOrConnectWithoutDivisaoInput = {
    where: treinoWhereUniqueInput
    create: XOR<treinoCreateWithoutDivisaoInput, treinoUncheckedCreateWithoutDivisaoInput>
  }

  export type treinoCreateManyDivisaoInputEnvelope = {
    data: Enumerable<treinoCreateManyDivisaoInput>
    skipDuplicates?: boolean
  }

  export type treinoUpsertWithWhereUniqueWithoutDivisaoInput = {
    where: treinoWhereUniqueInput
    update: XOR<treinoUpdateWithoutDivisaoInput, treinoUncheckedUpdateWithoutDivisaoInput>
    create: XOR<treinoCreateWithoutDivisaoInput, treinoUncheckedCreateWithoutDivisaoInput>
  }

  export type treinoUpdateWithWhereUniqueWithoutDivisaoInput = {
    where: treinoWhereUniqueInput
    data: XOR<treinoUpdateWithoutDivisaoInput, treinoUncheckedUpdateWithoutDivisaoInput>
  }

  export type treinoUpdateManyWithWhereWithoutDivisaoInput = {
    where: treinoScalarWhereInput
    data: XOR<treinoUpdateManyMutationInput, treinoUncheckedUpdateManyWithoutTreinoInput>
  }

  export type treinoScalarWhereInput = {
    AND?: Enumerable<treinoScalarWhereInput>
    OR?: Enumerable<treinoScalarWhereInput>
    NOT?: Enumerable<treinoScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    divisaoId?: IntFilter | number
  }

  export type musculaturaCreateWithoutExercicioInput = {
    name: string
    image: string
  }

  export type musculaturaUncheckedCreateWithoutExercicioInput = {
    id?: number
    name: string
    image: string
  }

  export type musculaturaCreateOrConnectWithoutExercicioInput = {
    where: musculaturaWhereUniqueInput
    create: XOR<musculaturaCreateWithoutExercicioInput, musculaturaUncheckedCreateWithoutExercicioInput>
  }

  export type grupoCreateWithoutExercicio_grupo_exercicio1ToexercicioInput = {
    day?: days | null
    treino: treinoCreateNestedOneWithoutGrupoInput
    exercicio_grupo_exercicio2Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio2ToexercicioInput
    exercicio_grupo_exercicio3Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio3ToexercicioInput
    exercicio_grupo_exercicio4Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio4ToexercicioInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio5ToexercicioInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio6ToexercicioInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio7ToexercicioInput
  }

  export type grupoUncheckedCreateWithoutExercicio_grupo_exercicio1ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateOrConnectWithoutExercicio_grupo_exercicio1ToexercicioInput = {
    where: grupoWhereUniqueInput
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio1ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio1ToexercicioInput>
  }

  export type grupoCreateManyExercicio_grupo_exercicio1ToexercicioInputEnvelope = {
    data: Enumerable<grupoCreateManyExercicio_grupo_exercicio1ToexercicioInput>
    skipDuplicates?: boolean
  }

  export type grupoCreateWithoutExercicio_grupo_exercicio2ToexercicioInput = {
    day?: days | null
    treino: treinoCreateNestedOneWithoutGrupoInput
    exercicio_grupo_exercicio1Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio1ToexercicioInput
    exercicio_grupo_exercicio3Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio3ToexercicioInput
    exercicio_grupo_exercicio4Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio4ToexercicioInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio5ToexercicioInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio6ToexercicioInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio7ToexercicioInput
  }

  export type grupoUncheckedCreateWithoutExercicio_grupo_exercicio2ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateOrConnectWithoutExercicio_grupo_exercicio2ToexercicioInput = {
    where: grupoWhereUniqueInput
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio2ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio2ToexercicioInput>
  }

  export type grupoCreateManyExercicio_grupo_exercicio2ToexercicioInputEnvelope = {
    data: Enumerable<grupoCreateManyExercicio_grupo_exercicio2ToexercicioInput>
    skipDuplicates?: boolean
  }

  export type grupoCreateWithoutExercicio_grupo_exercicio3ToexercicioInput = {
    day?: days | null
    treino: treinoCreateNestedOneWithoutGrupoInput
    exercicio_grupo_exercicio1Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio1ToexercicioInput
    exercicio_grupo_exercicio2Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio2ToexercicioInput
    exercicio_grupo_exercicio4Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio4ToexercicioInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio5ToexercicioInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio6ToexercicioInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio7ToexercicioInput
  }

  export type grupoUncheckedCreateWithoutExercicio_grupo_exercicio3ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateOrConnectWithoutExercicio_grupo_exercicio3ToexercicioInput = {
    where: grupoWhereUniqueInput
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio3ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio3ToexercicioInput>
  }

  export type grupoCreateManyExercicio_grupo_exercicio3ToexercicioInputEnvelope = {
    data: Enumerable<grupoCreateManyExercicio_grupo_exercicio3ToexercicioInput>
    skipDuplicates?: boolean
  }

  export type grupoCreateWithoutExercicio_grupo_exercicio4ToexercicioInput = {
    day?: days | null
    treino: treinoCreateNestedOneWithoutGrupoInput
    exercicio_grupo_exercicio1Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio1ToexercicioInput
    exercicio_grupo_exercicio2Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio2ToexercicioInput
    exercicio_grupo_exercicio3Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio3ToexercicioInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio5ToexercicioInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio6ToexercicioInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio7ToexercicioInput
  }

  export type grupoUncheckedCreateWithoutExercicio_grupo_exercicio4ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateOrConnectWithoutExercicio_grupo_exercicio4ToexercicioInput = {
    where: grupoWhereUniqueInput
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio4ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio4ToexercicioInput>
  }

  export type grupoCreateManyExercicio_grupo_exercicio4ToexercicioInputEnvelope = {
    data: Enumerable<grupoCreateManyExercicio_grupo_exercicio4ToexercicioInput>
    skipDuplicates?: boolean
  }

  export type grupoCreateWithoutExercicio_grupo_exercicio5ToexercicioInput = {
    day?: days | null
    treino: treinoCreateNestedOneWithoutGrupoInput
    exercicio_grupo_exercicio1Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio1ToexercicioInput
    exercicio_grupo_exercicio2Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio2ToexercicioInput
    exercicio_grupo_exercicio3Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio3ToexercicioInput
    exercicio_grupo_exercicio4Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio4ToexercicioInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio6ToexercicioInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio7ToexercicioInput
  }

  export type grupoUncheckedCreateWithoutExercicio_grupo_exercicio5ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateOrConnectWithoutExercicio_grupo_exercicio5ToexercicioInput = {
    where: grupoWhereUniqueInput
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio5ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio5ToexercicioInput>
  }

  export type grupoCreateManyExercicio_grupo_exercicio5ToexercicioInputEnvelope = {
    data: Enumerable<grupoCreateManyExercicio_grupo_exercicio5ToexercicioInput>
    skipDuplicates?: boolean
  }

  export type grupoCreateWithoutExercicio_grupo_exercicio6ToexercicioInput = {
    day?: days | null
    treino: treinoCreateNestedOneWithoutGrupoInput
    exercicio_grupo_exercicio1Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio1ToexercicioInput
    exercicio_grupo_exercicio2Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio2ToexercicioInput
    exercicio_grupo_exercicio3Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio3ToexercicioInput
    exercicio_grupo_exercicio4Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio4ToexercicioInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio5ToexercicioInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio7ToexercicioInput
  }

  export type grupoUncheckedCreateWithoutExercicio_grupo_exercicio6ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateOrConnectWithoutExercicio_grupo_exercicio6ToexercicioInput = {
    where: grupoWhereUniqueInput
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio6ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio6ToexercicioInput>
  }

  export type grupoCreateManyExercicio_grupo_exercicio6ToexercicioInputEnvelope = {
    data: Enumerable<grupoCreateManyExercicio_grupo_exercicio6ToexercicioInput>
    skipDuplicates?: boolean
  }

  export type grupoCreateWithoutExercicio_grupo_exercicio7ToexercicioInput = {
    day?: days | null
    treino: treinoCreateNestedOneWithoutGrupoInput
    exercicio_grupo_exercicio1Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio1ToexercicioInput
    exercicio_grupo_exercicio2Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio2ToexercicioInput
    exercicio_grupo_exercicio3Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio3ToexercicioInput
    exercicio_grupo_exercicio4Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio4ToexercicioInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio5ToexercicioInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio6ToexercicioInput
  }

  export type grupoUncheckedCreateWithoutExercicio_grupo_exercicio7ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
  }

  export type grupoCreateOrConnectWithoutExercicio_grupo_exercicio7ToexercicioInput = {
    where: grupoWhereUniqueInput
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio7ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio7ToexercicioInput>
  }

  export type grupoCreateManyExercicio_grupo_exercicio7ToexercicioInputEnvelope = {
    data: Enumerable<grupoCreateManyExercicio_grupo_exercicio7ToexercicioInput>
    skipDuplicates?: boolean
  }

  export type musculaturaUpsertWithoutExercicioInput = {
    update: XOR<musculaturaUpdateWithoutExercicioInput, musculaturaUncheckedUpdateWithoutExercicioInput>
    create: XOR<musculaturaCreateWithoutExercicioInput, musculaturaUncheckedCreateWithoutExercicioInput>
  }

  export type musculaturaUpdateWithoutExercicioInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type musculaturaUncheckedUpdateWithoutExercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio1ToexercicioInput = {
    where: grupoWhereUniqueInput
    update: XOR<grupoUpdateWithoutExercicio_grupo_exercicio1ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio1ToexercicioInput>
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio1ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio1ToexercicioInput>
  }

  export type grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio1ToexercicioInput = {
    where: grupoWhereUniqueInput
    data: XOR<grupoUpdateWithoutExercicio_grupo_exercicio1ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio1ToexercicioInput>
  }

  export type grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio1ToexercicioInput = {
    where: grupoScalarWhereInput
    data: XOR<grupoUpdateManyMutationInput, grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio1ToexercicioInput>
  }

  export type grupoScalarWhereInput = {
    AND?: Enumerable<grupoScalarWhereInput>
    OR?: Enumerable<grupoScalarWhereInput>
    NOT?: Enumerable<grupoScalarWhereInput>
    id?: IntFilter | number
    treinoId?: IntFilter | number
    day?: EnumdaysNullableFilter | days | null
    exercicio1?: IntFilter | number
    exercicio2?: IntFilter | number
    exercicio3?: IntFilter | number
    exercicio4?: IntFilter | number
    exercicio5?: IntNullableFilter | number | null
    exercicio6?: IntNullableFilter | number | null
    exercicio7?: IntNullableFilter | number | null
  }

  export type grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio2ToexercicioInput = {
    where: grupoWhereUniqueInput
    update: XOR<grupoUpdateWithoutExercicio_grupo_exercicio2ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio2ToexercicioInput>
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio2ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio2ToexercicioInput>
  }

  export type grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio2ToexercicioInput = {
    where: grupoWhereUniqueInput
    data: XOR<grupoUpdateWithoutExercicio_grupo_exercicio2ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio2ToexercicioInput>
  }

  export type grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio2ToexercicioInput = {
    where: grupoScalarWhereInput
    data: XOR<grupoUpdateManyMutationInput, grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio2ToexercicioInput>
  }

  export type grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio3ToexercicioInput = {
    where: grupoWhereUniqueInput
    update: XOR<grupoUpdateWithoutExercicio_grupo_exercicio3ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio3ToexercicioInput>
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio3ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio3ToexercicioInput>
  }

  export type grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio3ToexercicioInput = {
    where: grupoWhereUniqueInput
    data: XOR<grupoUpdateWithoutExercicio_grupo_exercicio3ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio3ToexercicioInput>
  }

  export type grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio3ToexercicioInput = {
    where: grupoScalarWhereInput
    data: XOR<grupoUpdateManyMutationInput, grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio3ToexercicioInput>
  }

  export type grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio4ToexercicioInput = {
    where: grupoWhereUniqueInput
    update: XOR<grupoUpdateWithoutExercicio_grupo_exercicio4ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio4ToexercicioInput>
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio4ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio4ToexercicioInput>
  }

  export type grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio4ToexercicioInput = {
    where: grupoWhereUniqueInput
    data: XOR<grupoUpdateWithoutExercicio_grupo_exercicio4ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio4ToexercicioInput>
  }

  export type grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio4ToexercicioInput = {
    where: grupoScalarWhereInput
    data: XOR<grupoUpdateManyMutationInput, grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio4ToexercicioInput>
  }

  export type grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio5ToexercicioInput = {
    where: grupoWhereUniqueInput
    update: XOR<grupoUpdateWithoutExercicio_grupo_exercicio5ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio5ToexercicioInput>
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio5ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio5ToexercicioInput>
  }

  export type grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio5ToexercicioInput = {
    where: grupoWhereUniqueInput
    data: XOR<grupoUpdateWithoutExercicio_grupo_exercicio5ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio5ToexercicioInput>
  }

  export type grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio5ToexercicioInput = {
    where: grupoScalarWhereInput
    data: XOR<grupoUpdateManyMutationInput, grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio5ToexercicioInput>
  }

  export type grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio6ToexercicioInput = {
    where: grupoWhereUniqueInput
    update: XOR<grupoUpdateWithoutExercicio_grupo_exercicio6ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio6ToexercicioInput>
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio6ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio6ToexercicioInput>
  }

  export type grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio6ToexercicioInput = {
    where: grupoWhereUniqueInput
    data: XOR<grupoUpdateWithoutExercicio_grupo_exercicio6ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio6ToexercicioInput>
  }

  export type grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio6ToexercicioInput = {
    where: grupoScalarWhereInput
    data: XOR<grupoUpdateManyMutationInput, grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio6ToexercicioInput>
  }

  export type grupoUpsertWithWhereUniqueWithoutExercicio_grupo_exercicio7ToexercicioInput = {
    where: grupoWhereUniqueInput
    update: XOR<grupoUpdateWithoutExercicio_grupo_exercicio7ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio7ToexercicioInput>
    create: XOR<grupoCreateWithoutExercicio_grupo_exercicio7ToexercicioInput, grupoUncheckedCreateWithoutExercicio_grupo_exercicio7ToexercicioInput>
  }

  export type grupoUpdateWithWhereUniqueWithoutExercicio_grupo_exercicio7ToexercicioInput = {
    where: grupoWhereUniqueInput
    data: XOR<grupoUpdateWithoutExercicio_grupo_exercicio7ToexercicioInput, grupoUncheckedUpdateWithoutExercicio_grupo_exercicio7ToexercicioInput>
  }

  export type grupoUpdateManyWithWhereWithoutExercicio_grupo_exercicio7ToexercicioInput = {
    where: grupoScalarWhereInput
    data: XOR<grupoUpdateManyMutationInput, grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio7ToexercicioInput>
  }

  export type treinoCreateWithoutGrupoInput = {
    user: userCreateNestedOneWithoutTreinoInput
    divisao: divisaoCreateNestedOneWithoutTreinoInput
  }

  export type treinoUncheckedCreateWithoutGrupoInput = {
    id?: number
    userId: number
    divisaoId: number
  }

  export type treinoCreateOrConnectWithoutGrupoInput = {
    where: treinoWhereUniqueInput
    create: XOR<treinoCreateWithoutGrupoInput, treinoUncheckedCreateWithoutGrupoInput>
  }

  export type exercicioCreateWithoutGrupo_grupo_exercicio1ToexercicioInput = {
    name: string
    video: string
    musculatura: musculaturaCreateNestedOneWithoutExercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioUncheckedCreateWithoutGrupo_grupo_exercicio1ToexercicioInput = {
    id?: number
    name: string
    musculaturaId: number
    video: string
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioCreateOrConnectWithoutGrupo_grupo_exercicio1ToexercicioInput = {
    where: exercicioWhereUniqueInput
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio1ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio1ToexercicioInput>
  }

  export type exercicioCreateWithoutGrupo_grupo_exercicio2ToexercicioInput = {
    name: string
    video: string
    musculatura: musculaturaCreateNestedOneWithoutExercicioInput
    grupo_grupo_exercicio1Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioUncheckedCreateWithoutGrupo_grupo_exercicio2ToexercicioInput = {
    id?: number
    name: string
    musculaturaId: number
    video: string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioCreateOrConnectWithoutGrupo_grupo_exercicio2ToexercicioInput = {
    where: exercicioWhereUniqueInput
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio2ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio2ToexercicioInput>
  }

  export type exercicioCreateWithoutGrupo_grupo_exercicio3ToexercicioInput = {
    name: string
    video: string
    musculatura: musculaturaCreateNestedOneWithoutExercicioInput
    grupo_grupo_exercicio1Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioUncheckedCreateWithoutGrupo_grupo_exercicio3ToexercicioInput = {
    id?: number
    name: string
    musculaturaId: number
    video: string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioCreateOrConnectWithoutGrupo_grupo_exercicio3ToexercicioInput = {
    where: exercicioWhereUniqueInput
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio3ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio3ToexercicioInput>
  }

  export type exercicioCreateWithoutGrupo_grupo_exercicio4ToexercicioInput = {
    name: string
    video: string
    musculatura: musculaturaCreateNestedOneWithoutExercicioInput
    grupo_grupo_exercicio1Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioUncheckedCreateWithoutGrupo_grupo_exercicio4ToexercicioInput = {
    id?: number
    name: string
    musculaturaId: number
    video: string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioCreateOrConnectWithoutGrupo_grupo_exercicio4ToexercicioInput = {
    where: exercicioWhereUniqueInput
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio4ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio4ToexercicioInput>
  }

  export type exercicioCreateWithoutGrupo_grupo_exercicio5ToexercicioInput = {
    name: string
    video: string
    musculatura: musculaturaCreateNestedOneWithoutExercicioInput
    grupo_grupo_exercicio1Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioUncheckedCreateWithoutGrupo_grupo_exercicio5ToexercicioInput = {
    id?: number
    name: string
    musculaturaId: number
    video: string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioCreateOrConnectWithoutGrupo_grupo_exercicio5ToexercicioInput = {
    where: exercicioWhereUniqueInput
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio5ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio5ToexercicioInput>
  }

  export type exercicioCreateWithoutGrupo_grupo_exercicio6ToexercicioInput = {
    name: string
    video: string
    musculatura: musculaturaCreateNestedOneWithoutExercicioInput
    grupo_grupo_exercicio1Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioUncheckedCreateWithoutGrupo_grupo_exercicio6ToexercicioInput = {
    id?: number
    name: string
    musculaturaId: number
    video: string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioCreateOrConnectWithoutGrupo_grupo_exercicio6ToexercicioInput = {
    where: exercicioWhereUniqueInput
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio6ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio6ToexercicioInput>
  }

  export type exercicioCreateWithoutGrupo_grupo_exercicio7ToexercicioInput = {
    name: string
    video: string
    musculatura: musculaturaCreateNestedOneWithoutExercicioInput
    grupo_grupo_exercicio1Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
  }

  export type exercicioUncheckedCreateWithoutGrupo_grupo_exercicio7ToexercicioInput = {
    id?: number
    name: string
    musculaturaId: number
    video: string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
  }

  export type exercicioCreateOrConnectWithoutGrupo_grupo_exercicio7ToexercicioInput = {
    where: exercicioWhereUniqueInput
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio7ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio7ToexercicioInput>
  }

  export type treinoUpsertWithoutGrupoInput = {
    update: XOR<treinoUpdateWithoutGrupoInput, treinoUncheckedUpdateWithoutGrupoInput>
    create: XOR<treinoCreateWithoutGrupoInput, treinoUncheckedCreateWithoutGrupoInput>
  }

  export type treinoUpdateWithoutGrupoInput = {
    user?: userUpdateOneRequiredWithoutTreinoNestedInput
    divisao?: divisaoUpdateOneRequiredWithoutTreinoNestedInput
  }

  export type treinoUncheckedUpdateWithoutGrupoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    divisaoId?: IntFieldUpdateOperationsInput | number
  }

  export type exercicioUpsertWithoutGrupo_grupo_exercicio1ToexercicioInput = {
    update: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio1ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio1ToexercicioInput>
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio1ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio1ToexercicioInput>
  }

  export type exercicioUpdateWithoutGrupo_grupo_exercicio1ToexercicioInput = {
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
    musculatura?: musculaturaUpdateOneRequiredWithoutExercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio1ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    musculaturaId?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUpsertWithoutGrupo_grupo_exercicio2ToexercicioInput = {
    update: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio2ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio2ToexercicioInput>
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio2ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio2ToexercicioInput>
  }

  export type exercicioUpdateWithoutGrupo_grupo_exercicio2ToexercicioInput = {
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
    musculatura?: musculaturaUpdateOneRequiredWithoutExercicioNestedInput
    grupo_grupo_exercicio1Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio2ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    musculaturaId?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUpsertWithoutGrupo_grupo_exercicio3ToexercicioInput = {
    update: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio3ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio3ToexercicioInput>
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio3ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio3ToexercicioInput>
  }

  export type exercicioUpdateWithoutGrupo_grupo_exercicio3ToexercicioInput = {
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
    musculatura?: musculaturaUpdateOneRequiredWithoutExercicioNestedInput
    grupo_grupo_exercicio1Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio3ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    musculaturaId?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUpsertWithoutGrupo_grupo_exercicio4ToexercicioInput = {
    update: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio4ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio4ToexercicioInput>
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio4ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio4ToexercicioInput>
  }

  export type exercicioUpdateWithoutGrupo_grupo_exercicio4ToexercicioInput = {
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
    musculatura?: musculaturaUpdateOneRequiredWithoutExercicioNestedInput
    grupo_grupo_exercicio1Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio4ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    musculaturaId?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUpsertWithoutGrupo_grupo_exercicio5ToexercicioInput = {
    update: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio5ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio5ToexercicioInput>
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio5ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio5ToexercicioInput>
  }

  export type exercicioUpdateWithoutGrupo_grupo_exercicio5ToexercicioInput = {
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
    musculatura?: musculaturaUpdateOneRequiredWithoutExercicioNestedInput
    grupo_grupo_exercicio1Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio5ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    musculaturaId?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUpsertWithoutGrupo_grupo_exercicio6ToexercicioInput = {
    update: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio6ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio6ToexercicioInput>
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio6ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio6ToexercicioInput>
  }

  export type exercicioUpdateWithoutGrupo_grupo_exercicio6ToexercicioInput = {
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
    musculatura?: musculaturaUpdateOneRequiredWithoutExercicioNestedInput
    grupo_grupo_exercicio1Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio6ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    musculaturaId?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUpsertWithoutGrupo_grupo_exercicio7ToexercicioInput = {
    update: XOR<exercicioUpdateWithoutGrupo_grupo_exercicio7ToexercicioInput, exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio7ToexercicioInput>
    create: XOR<exercicioCreateWithoutGrupo_grupo_exercicio7ToexercicioInput, exercicioUncheckedCreateWithoutGrupo_grupo_exercicio7ToexercicioInput>
  }

  export type exercicioUpdateWithoutGrupo_grupo_exercicio7ToexercicioInput = {
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
    musculatura?: musculaturaUpdateOneRequiredWithoutExercicioNestedInput
    grupo_grupo_exercicio1Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
  }

  export type exercicioUncheckedUpdateWithoutGrupo_grupo_exercicio7ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    musculaturaId?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
  }

  export type exercicioCreateWithoutMusculaturaInput = {
    name: string
    video: string
    grupo_grupo_exercicio1Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioUncheckedCreateWithoutMusculaturaInput = {
    id?: number
    name: string
    video: string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio1ToexercicioInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio2ToexercicioInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio3ToexercicioInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio4ToexercicioInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio5ToexercicioInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio6ToexercicioInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedCreateNestedManyWithoutExercicio_grupo_exercicio7ToexercicioInput
  }

  export type exercicioCreateOrConnectWithoutMusculaturaInput = {
    where: exercicioWhereUniqueInput
    create: XOR<exercicioCreateWithoutMusculaturaInput, exercicioUncheckedCreateWithoutMusculaturaInput>
  }

  export type exercicioCreateManyMusculaturaInputEnvelope = {
    data: Enumerable<exercicioCreateManyMusculaturaInput>
    skipDuplicates?: boolean
  }

  export type exercicioUpsertWithWhereUniqueWithoutMusculaturaInput = {
    where: exercicioWhereUniqueInput
    update: XOR<exercicioUpdateWithoutMusculaturaInput, exercicioUncheckedUpdateWithoutMusculaturaInput>
    create: XOR<exercicioCreateWithoutMusculaturaInput, exercicioUncheckedCreateWithoutMusculaturaInput>
  }

  export type exercicioUpdateWithWhereUniqueWithoutMusculaturaInput = {
    where: exercicioWhereUniqueInput
    data: XOR<exercicioUpdateWithoutMusculaturaInput, exercicioUncheckedUpdateWithoutMusculaturaInput>
  }

  export type exercicioUpdateManyWithWhereWithoutMusculaturaInput = {
    where: exercicioScalarWhereInput
    data: XOR<exercicioUpdateManyMutationInput, exercicioUncheckedUpdateManyWithoutExercicioInput>
  }

  export type exercicioScalarWhereInput = {
    AND?: Enumerable<exercicioScalarWhereInput>
    OR?: Enumerable<exercicioScalarWhereInput>
    NOT?: Enumerable<exercicioScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    musculaturaId?: IntFilter | number
    video?: StringFilter | string
  }

  export type grupoCreateWithoutTreinoInput = {
    day?: days | null
    exercicio_grupo_exercicio1Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio1ToexercicioInput
    exercicio_grupo_exercicio2Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio2ToexercicioInput
    exercicio_grupo_exercicio3Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio3ToexercicioInput
    exercicio_grupo_exercicio4Toexercicio: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio4ToexercicioInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio5ToexercicioInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio6ToexercicioInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioCreateNestedOneWithoutGrupo_grupo_exercicio7ToexercicioInput
  }

  export type grupoUncheckedCreateWithoutTreinoInput = {
    id?: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateOrConnectWithoutTreinoInput = {
    where: grupoWhereUniqueInput
    create: XOR<grupoCreateWithoutTreinoInput, grupoUncheckedCreateWithoutTreinoInput>
  }

  export type grupoCreateManyTreinoInputEnvelope = {
    data: Enumerable<grupoCreateManyTreinoInput>
    skipDuplicates?: boolean
  }

  export type userCreateWithoutTreinoInput = {
    nome: string
    email: string
    password: string
    idade: number
    altura: number
    peso: number
  }

  export type userUncheckedCreateWithoutTreinoInput = {
    id?: number
    nome: string
    email: string
    password: string
    idade: number
    altura: number
    peso: number
  }

  export type userCreateOrConnectWithoutTreinoInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutTreinoInput, userUncheckedCreateWithoutTreinoInput>
  }

  export type divisaoCreateWithoutTreinoInput = {
    name: string
    descricao: string
    days: number
  }

  export type divisaoUncheckedCreateWithoutTreinoInput = {
    id?: number
    name: string
    descricao: string
    days: number
  }

  export type divisaoCreateOrConnectWithoutTreinoInput = {
    where: divisaoWhereUniqueInput
    create: XOR<divisaoCreateWithoutTreinoInput, divisaoUncheckedCreateWithoutTreinoInput>
  }

  export type grupoUpsertWithWhereUniqueWithoutTreinoInput = {
    where: grupoWhereUniqueInput
    update: XOR<grupoUpdateWithoutTreinoInput, grupoUncheckedUpdateWithoutTreinoInput>
    create: XOR<grupoCreateWithoutTreinoInput, grupoUncheckedCreateWithoutTreinoInput>
  }

  export type grupoUpdateWithWhereUniqueWithoutTreinoInput = {
    where: grupoWhereUniqueInput
    data: XOR<grupoUpdateWithoutTreinoInput, grupoUncheckedUpdateWithoutTreinoInput>
  }

  export type grupoUpdateManyWithWhereWithoutTreinoInput = {
    where: grupoScalarWhereInput
    data: XOR<grupoUpdateManyMutationInput, grupoUncheckedUpdateManyWithoutGrupoInput>
  }

  export type userUpsertWithoutTreinoInput = {
    update: XOR<userUpdateWithoutTreinoInput, userUncheckedUpdateWithoutTreinoInput>
    create: XOR<userCreateWithoutTreinoInput, userUncheckedCreateWithoutTreinoInput>
  }

  export type userUpdateWithoutTreinoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: IntFieldUpdateOperationsInput | number
    peso?: IntFieldUpdateOperationsInput | number
  }

  export type userUncheckedUpdateWithoutTreinoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: IntFieldUpdateOperationsInput | number
    peso?: IntFieldUpdateOperationsInput | number
  }

  export type divisaoUpsertWithoutTreinoInput = {
    update: XOR<divisaoUpdateWithoutTreinoInput, divisaoUncheckedUpdateWithoutTreinoInput>
    create: XOR<divisaoCreateWithoutTreinoInput, divisaoUncheckedCreateWithoutTreinoInput>
  }

  export type divisaoUpdateWithoutTreinoInput = {
    name?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
  }

  export type divisaoUncheckedUpdateWithoutTreinoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
  }

  export type treinoCreateWithoutUserInput = {
    grupo?: grupoCreateNestedManyWithoutTreinoInput
    divisao: divisaoCreateNestedOneWithoutTreinoInput
  }

  export type treinoUncheckedCreateWithoutUserInput = {
    id?: number
    divisaoId: number
    grupo?: grupoUncheckedCreateNestedManyWithoutTreinoInput
  }

  export type treinoCreateOrConnectWithoutUserInput = {
    where: treinoWhereUniqueInput
    create: XOR<treinoCreateWithoutUserInput, treinoUncheckedCreateWithoutUserInput>
  }

  export type treinoCreateManyUserInputEnvelope = {
    data: Enumerable<treinoCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type treinoUpsertWithWhereUniqueWithoutUserInput = {
    where: treinoWhereUniqueInput
    update: XOR<treinoUpdateWithoutUserInput, treinoUncheckedUpdateWithoutUserInput>
    create: XOR<treinoCreateWithoutUserInput, treinoUncheckedCreateWithoutUserInput>
  }

  export type treinoUpdateWithWhereUniqueWithoutUserInput = {
    where: treinoWhereUniqueInput
    data: XOR<treinoUpdateWithoutUserInput, treinoUncheckedUpdateWithoutUserInput>
  }

  export type treinoUpdateManyWithWhereWithoutUserInput = {
    where: treinoScalarWhereInput
    data: XOR<treinoUpdateManyMutationInput, treinoUncheckedUpdateManyWithoutTreinoInput>
  }

  export type treinoCreateManyDivisaoInput = {
    id?: number
    userId: number
  }

  export type treinoUpdateWithoutDivisaoInput = {
    grupo?: grupoUpdateManyWithoutTreinoNestedInput
    user?: userUpdateOneRequiredWithoutTreinoNestedInput
  }

  export type treinoUncheckedUpdateWithoutDivisaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    grupo?: grupoUncheckedUpdateManyWithoutTreinoNestedInput
  }

  export type treinoUncheckedUpdateManyWithoutTreinoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type grupoCreateManyExercicio_grupo_exercicio1ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateManyExercicio_grupo_exercicio2ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateManyExercicio_grupo_exercicio3ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateManyExercicio_grupo_exercicio4ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateManyExercicio_grupo_exercicio5ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateManyExercicio_grupo_exercicio6ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio7?: number | null
  }

  export type grupoCreateManyExercicio_grupo_exercicio7ToexercicioInput = {
    id?: number
    treinoId: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
  }

  export type grupoUpdateWithoutExercicio_grupo_exercicio1ToexercicioInput = {
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    treino?: treinoUpdateOneRequiredWithoutGrupoNestedInput
    exercicio_grupo_exercicio2Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio2ToexercicioNestedInput
    exercicio_grupo_exercicio3Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio3ToexercicioNestedInput
    exercicio_grupo_exercicio4Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio4ToexercicioNestedInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio5ToexercicioNestedInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio6ToexercicioNestedInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio7ToexercicioNestedInput
  }

  export type grupoUncheckedUpdateWithoutExercicio_grupo_exercicio1ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio1ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUpdateWithoutExercicio_grupo_exercicio2ToexercicioInput = {
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    treino?: treinoUpdateOneRequiredWithoutGrupoNestedInput
    exercicio_grupo_exercicio1Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio1ToexercicioNestedInput
    exercicio_grupo_exercicio3Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio3ToexercicioNestedInput
    exercicio_grupo_exercicio4Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio4ToexercicioNestedInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio5ToexercicioNestedInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio6ToexercicioNestedInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio7ToexercicioNestedInput
  }

  export type grupoUncheckedUpdateWithoutExercicio_grupo_exercicio2ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio2ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUpdateWithoutExercicio_grupo_exercicio3ToexercicioInput = {
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    treino?: treinoUpdateOneRequiredWithoutGrupoNestedInput
    exercicio_grupo_exercicio1Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio1ToexercicioNestedInput
    exercicio_grupo_exercicio2Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio2ToexercicioNestedInput
    exercicio_grupo_exercicio4Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio4ToexercicioNestedInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio5ToexercicioNestedInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio6ToexercicioNestedInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio7ToexercicioNestedInput
  }

  export type grupoUncheckedUpdateWithoutExercicio_grupo_exercicio3ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio3ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUpdateWithoutExercicio_grupo_exercicio4ToexercicioInput = {
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    treino?: treinoUpdateOneRequiredWithoutGrupoNestedInput
    exercicio_grupo_exercicio1Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio1ToexercicioNestedInput
    exercicio_grupo_exercicio2Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio2ToexercicioNestedInput
    exercicio_grupo_exercicio3Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio3ToexercicioNestedInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio5ToexercicioNestedInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio6ToexercicioNestedInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio7ToexercicioNestedInput
  }

  export type grupoUncheckedUpdateWithoutExercicio_grupo_exercicio4ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio4ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUpdateWithoutExercicio_grupo_exercicio5ToexercicioInput = {
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    treino?: treinoUpdateOneRequiredWithoutGrupoNestedInput
    exercicio_grupo_exercicio1Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio1ToexercicioNestedInput
    exercicio_grupo_exercicio2Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio2ToexercicioNestedInput
    exercicio_grupo_exercicio3Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio3ToexercicioNestedInput
    exercicio_grupo_exercicio4Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio4ToexercicioNestedInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio6ToexercicioNestedInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio7ToexercicioNestedInput
  }

  export type grupoUncheckedUpdateWithoutExercicio_grupo_exercicio5ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio5ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUpdateWithoutExercicio_grupo_exercicio6ToexercicioInput = {
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    treino?: treinoUpdateOneRequiredWithoutGrupoNestedInput
    exercicio_grupo_exercicio1Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio1ToexercicioNestedInput
    exercicio_grupo_exercicio2Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio2ToexercicioNestedInput
    exercicio_grupo_exercicio3Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio3ToexercicioNestedInput
    exercicio_grupo_exercicio4Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio4ToexercicioNestedInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio5ToexercicioNestedInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio7ToexercicioNestedInput
  }

  export type grupoUncheckedUpdateWithoutExercicio_grupo_exercicio6ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio6ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUpdateWithoutExercicio_grupo_exercicio7ToexercicioInput = {
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    treino?: treinoUpdateOneRequiredWithoutGrupoNestedInput
    exercicio_grupo_exercicio1Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio1ToexercicioNestedInput
    exercicio_grupo_exercicio2Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio2ToexercicioNestedInput
    exercicio_grupo_exercicio3Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio3ToexercicioNestedInput
    exercicio_grupo_exercicio4Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio4ToexercicioNestedInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio5ToexercicioNestedInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio6ToexercicioNestedInput
  }

  export type grupoUncheckedUpdateWithoutExercicio_grupo_exercicio7ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUncheckedUpdateManyWithoutGrupo_grupo_exercicio7ToexercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    treinoId?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type exercicioCreateManyMusculaturaInput = {
    id?: number
    name: string
    video: string
  }

  export type exercicioUpdateWithoutMusculaturaInput = {
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
    grupo_grupo_exercicio1Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUncheckedUpdateWithoutMusculaturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
    grupo_grupo_exercicio1Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio1ToexercicioNestedInput
    grupo_grupo_exercicio2Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio2ToexercicioNestedInput
    grupo_grupo_exercicio3Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio3ToexercicioNestedInput
    grupo_grupo_exercicio4Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio4ToexercicioNestedInput
    grupo_grupo_exercicio5Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio5ToexercicioNestedInput
    grupo_grupo_exercicio6Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio6ToexercicioNestedInput
    grupo_grupo_exercicio7Toexercicio?: grupoUncheckedUpdateManyWithoutExercicio_grupo_exercicio7ToexercicioNestedInput
  }

  export type exercicioUncheckedUpdateManyWithoutExercicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    video?: StringFieldUpdateOperationsInput | string
  }

  export type grupoCreateManyTreinoInput = {
    id?: number
    day?: days | null
    exercicio1: number
    exercicio2: number
    exercicio3: number
    exercicio4: number
    exercicio5?: number | null
    exercicio6?: number | null
    exercicio7?: number | null
  }

  export type grupoUpdateWithoutTreinoInput = {
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio_grupo_exercicio1Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio1ToexercicioNestedInput
    exercicio_grupo_exercicio2Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio2ToexercicioNestedInput
    exercicio_grupo_exercicio3Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio3ToexercicioNestedInput
    exercicio_grupo_exercicio4Toexercicio?: exercicioUpdateOneRequiredWithoutGrupo_grupo_exercicio4ToexercicioNestedInput
    exercicio_grupo_exercicio5Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio5ToexercicioNestedInput
    exercicio_grupo_exercicio6Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio6ToexercicioNestedInput
    exercicio_grupo_exercicio7Toexercicio?: exercicioUpdateOneWithoutGrupo_grupo_exercicio7ToexercicioNestedInput
  }

  export type grupoUncheckedUpdateWithoutTreinoInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type grupoUncheckedUpdateManyWithoutGrupoInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: NullableEnumdaysFieldUpdateOperationsInput | days | null
    exercicio1?: IntFieldUpdateOperationsInput | number
    exercicio2?: IntFieldUpdateOperationsInput | number
    exercicio3?: IntFieldUpdateOperationsInput | number
    exercicio4?: IntFieldUpdateOperationsInput | number
    exercicio5?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio6?: NullableIntFieldUpdateOperationsInput | number | null
    exercicio7?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type treinoCreateManyUserInput = {
    id?: number
    divisaoId: number
  }

  export type treinoUpdateWithoutUserInput = {
    grupo?: grupoUpdateManyWithoutTreinoNestedInput
    divisao?: divisaoUpdateOneRequiredWithoutTreinoNestedInput
  }

  export type treinoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    divisaoId?: IntFieldUpdateOperationsInput | number
    grupo?: grupoUncheckedUpdateManyWithoutTreinoNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}